'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Phone, Shield, CheckCircle2, AlertTriangle } from 'lucide-react';

interface PhoneVerificationProps {
  onVerified: (token: string) => void;
  isVerified: boolean;
  userPhone?: string; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userPlan?: string;
}

export default function PhoneVerification({ onVerified, isVerified, userPhone, userPlan }: PhoneVerificationProps) {
  const [phone, setPhone] = useState(userPhone || '');
  const [code, setCode] = useState('');
  const [sessionId, setSessionId] = useState('');
  const [step, setStep] = useState<'phone' | 'code'>('phone');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [debugCode, setDebugCode] = useState(''); // –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const [botUsername, setBotUsername] = useState(''); // –ò–º—è –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const [otpSent, setOtpSent] = useState(false); // –ë—ã–ª –ª–∏ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  React.useEffect(() => {
    if (userPhone && userPhone !== phone) {
      setPhone(userPhone);
    }
  }, [userPhone]);

  const sendCode = async () => {
    if (!phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    if (userPhone && phone.trim() !== userPhone.trim()) {
      setError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/telegram-otp/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: phone.trim() })
      });

      const data = await response.json();

      if (data.success) {
        setSessionId(data.sessionId);
        setBotUsername(data.botUsername || '');
        setOtpSent(data.otpSent || false);
        
        if (data.otpSent) {
          setStep('code');
          setSuccess('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
        } else if (data.botUsername) {
          setStep('code'); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–¥—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
          setSuccess(`–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫ –±–æ—Ç—É @${data.botUsername}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑"`);
        } else {
          setStep('code');
          setSuccess('–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
        if (data.debug_code) {
          setDebugCode(data.debug_code);
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  const verifyCode = async () => {
    if (!code.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/telegram-otp/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          phone: phone.trim(), 
          code: code.trim(), 
          sessionId 
        })
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        localStorage.setItem('phone_verification_token', data.token);
        localStorage.setItem('verified_phone', phone.trim());
        onVerified(data.token);
      } else {
        setError(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  const resetVerification = () => {
    setPhone('');
    setCode('');
    setSessionId('');
    setStep('phone');
    setError('');
    setSuccess('');
    setDebugCode('');
    setBotUsername('');
    setOtpSent(false);
    localStorage.removeItem('phone_verification_token');
    localStorage.removeItem('verified_phone');
  };

  const resendCode = async () => {
    if (!phone.trim()) {
      setError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    if (userPhone && phone.trim() !== userPhone.trim()) {
      setError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/telegram-otp/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: phone.trim() })
      });

      const data = await response.json();

      if (data.success) {
        setSessionId(data.sessionId);
        setOtpSent(data.otpSent || false);
        
        if (data.otpSent) {
          setSuccess('–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
        } else {
          setSuccess('–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫ –±–æ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ Telegram.');
        }
        
        if (data.debug_code) {
          setDebugCode(data.debug_code);
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  if (isVerified) {
    const isPaidPlan = userPlan && userPlan !== 'free';
    
    return (
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle2 className="h-5 w-5 text-green-600" />
            –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
          </CardTitle>
          <CardDescription>
            –í–∞—à –Ω–æ–º–µ—Ä {localStorage.getItem('verified_phone')} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            <Badge variant="secondary" className="text-green-600">
              <Shield className="h-4 w-4 mr-1" />
              –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            </Badge>
            <Button variant="outline" size="sm" onClick={resetVerification}>
              –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
            </Button>
          </div>
          
          {userPlan === 'free' && (
            <div className="mt-4 p-3 bg-orange-50 border border-orange-200 rounded-md">
              <div className="flex items-center gap-2 text-orange-800">
                <AlertTriangle className="h-4 w-4" />
                <span className="font-medium">–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞</span>
              </div>
              <p className="text-sm text-orange-700 mt-1">
                –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–∞—Ä–∏—Ñ—ã".
              </p>
            </div>
          )}
          
          {isPaidPlan && (
            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
              <div className="flex items-center gap-2 text-green-800">
                <CheckCircle2 className="h-4 w-4" />
                <span className="font-medium">–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</span>
              </div>
              <p className="text-sm text-green-700 mt-1">
                –¢–∞—Ä–∏—Ñ "{userPlan === 'professional' ? '–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô' : '–ë–ê–ó–û–í–´–ô'}" –∞–∫—Ç–∏–≤–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Phone className="h-5 w-5" />
          –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        </CardTitle>
        <CardDescription>
          –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Telegram
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {step === 'phone' ? (
          <>
            <div>
              <label className="text-sm font-medium mb-2 block">
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
              </label>
              <Input
                type="tel"
                placeholder="+7 (999) 123-45-67"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                disabled={!!userPhone} // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                className="mb-2"
              />
              {userPhone && (
                <p className="text-xs text-gray-500 mb-4">
                  üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.
                </p>
              )}
              {!userPhone && (
                <p className="text-xs text-orange-600 mb-4">
                  ‚ö†Ô∏è –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å.
                </p>
              )}
            </div>
            <Button onClick={sendCode} disabled={loading} className="w-full">
              {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ Telegram'}
            </Button>
          </>
        ) : (
          <>
            <div>
              <label className="text-sm font-medium mb-2 block">
                –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram
              </label>
              <Input
                type="text"
                placeholder="123456"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                maxLength={6}
                className="mb-4"
              />
              {debugCode && (
                <div className="text-sm text-blue-600 p-2 bg-blue-50 rounded-md mb-2">
                  <strong>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong> –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {debugCode}
                </div>
              )}
              
              {botUsername && !otpSent && (
                <div className="text-sm text-orange-600 p-3 bg-orange-50 rounded-md mb-2">
                  <div className="font-medium mb-2 flex items-center gap-1">
                    <AlertTriangle className="h-4 w-4" />
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞:
                  </div>
                  <ol className="list-decimal list-inside space-y-1 text-xs mb-3">
                    <li>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ: <strong>@{botUsername}</strong></li>
                    <li>–ù–∞–∂–º–∏—Ç–µ "Start" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>/start</strong></li>
                    <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: <strong>{phone}</strong></li>
                    <li>–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</li>
                  </ol>
                  <Button 
                    onClick={resendCode} 
                    disabled={loading}
                    variant="outline" 
                    size="sm" 
                    className="w-full"
                  >
                    {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑'}
                  </Button>
                </div>
              )}
              
              {otpSent && (
                <div className="text-sm text-green-600 p-2 bg-green-50 rounded-md mb-2">
                  ‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º.
                </div>
              )}
            </div>
            <div className="flex gap-2">
              <Button onClick={verifyCode} disabled={loading} className="flex-1">
                {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => {
                  setStep('phone');
                  setCode('');
                  setDebugCode('');
                }}
                disabled={loading}
              >
                –ù–∞–∑–∞–¥
              </Button>
            </div>
          </>
        )}

        {error && (
          <div className="text-red-600 text-sm p-3 bg-red-50 rounded-md flex items-start gap-2">
            <AlertTriangle className="h-4 w-4 mt-0.5 flex-shrink-0" />
            {error}
          </div>
        )}

        {success && (
          <div className="text-green-600 text-sm p-3 bg-green-50 rounded-md flex items-start gap-2">
            <CheckCircle2 className="h-4 w-4 mt-0.5 flex-shrink-0" />
            {success}
          </div>
        )}
      </CardContent>
    </Card>
  );
}