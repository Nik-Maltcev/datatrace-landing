import axios from 'axios';

export class TelegramGateway {
  private botToken: string;
  private baseURL = 'https://api.telegram.org';

  constructor(botToken: string) {
    this.botToken = botToken;
  }

  private getChatIdByPhone(phone: string): number | null {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let normalizedPhone = phone.replace(/\D/g, '');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 8 –≤ 7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if (normalizedPhone.startsWith('8') && normalizedPhone.length === 11) {
      normalizedPhone = '7' + normalizedPhone.substring(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º 7 –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    if (normalizedPhone.length === 10) {
      normalizedPhone = '7' + normalizedPhone;
    }
    
    console.log('üîç –ò—â–µ–º chat_id –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phone, '‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π:', normalizedPhone);
    
    const userData = global.telegramUsers?.get(`phone_${normalizedPhone}`);
    
    if (userData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω chat_id:', userData.chatId, '–¥–ª—è –Ω–æ–º–µ—Ä–∞:', normalizedPhone);
      return userData.chatId;
    }
    
    console.log('‚ùå Chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞:', normalizedPhone);
    console.log('üíæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏:', Array.from(global.telegramUsers?.keys() || []));
    return null;
  }

  async sendMessage(chatId: string, message: string): Promise<boolean> {
    try {
      const response = await axios.post(
        `${this.baseURL}/bot${this.botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML'
        }
      );
      
      return response.data.ok;
    } catch (error) {
      console.error('Telegram API error:', error);
      return false;
    }
  }

  // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendOTPCode(phone: string, code: string): Promise<{ success: boolean, botUsername?: string }> {
    console.log('üìû –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phone);
    
    const chatId = this.getChatIdByPhone(phone);
    
    if (!chatId) {
      console.log('‚ùå Chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫ –±–æ—Ç—É.');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
      try {
        const botInfo = await axios.get(`${this.baseURL}/bot${this.botToken}/getMe`);
        return {
          success: false,
          botUsername: botInfo.data.result.username
        };
      } catch (error) {
        return { success: false };
      }
    }

    const message = `üîê <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è DataTrace</b>

<code>${code}</code>

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º`;

    try {
      const response = await axios.post(
        `${this.baseURL}/bot${this.botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML'
        }
      );
      
      if (response.data.ok) {
        console.log('‚úÖ OTP –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        return { success: true };
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP:', response.data);
        return { success: false };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP:', error);
      return { success: false };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  async validateBot(): Promise<boolean> {
    try {
      const response = await axios.get(`${this.baseURL}/bot${this.botToken}/getMe`);
      console.log('‚úÖ Telegram Bot —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω:', response.data.result);
      return response.data.ok;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot:', error);
      return false;
    }
  }
}