// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–≤ production –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let checkHistory: any[] = []

export interface CheckRecord {
  id: string
  userId: string
  type: 'phone' | 'email'
  query: string
  date: string
  status: 'completed' | 'failed'
  totalLeaks: number
  foundSources: number
  message: string
  results: Array<{
    source: string
    found: boolean
    count: number
    ok: boolean
    error?: any
    items?: any // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  }>
}

export function saveCheckResult(data: {
  type: 'phone' | 'email'
  query: string
  results: any[]
  totalLeaks: number
  foundSources: number
  message: string
  userId?: string
}): CheckRecord {
  const { type, query, results, totalLeaks, foundSources, message, userId } = data

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
  const checkRecord: CheckRecord = {
    id: Date.now().toString(),
    userId: userId || 'current-user',
    type: type,
    query: query,
    date: new Date().toISOString(),
    status: 'completed',
    totalLeaks: totalLeaks || 0,
    foundSources: foundSources || 0,
    message: message || '',
    results: results?.map((result: any) => ({
      source: result.name,
      found: result.ok && (
        Array.isArray(result.items) ? result.items.length > 0 : 
        (typeof result.items === 'object' && result.items !== null) ? Object.keys(result.items).length > 0 : 
        false
      ),
      count: Array.isArray(result.items) ? result.items.length : 
             (typeof result.items === 'object' && result.items !== null) ? 
             Object.values(result.items).reduce((sum: number, items: any) => sum + (Array.isArray(items) ? items.length : 0), 0) : 0,
      ok: result.ok,
      error: result.error,
      items: result.items // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    })) || []
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  checkHistory.push(checkRecord)
  
  console.log(`üíæ Saved check result: ${type} - ${query} - ${totalLeaks} leaks`)
  console.log(`üìä Total checks in history: ${checkHistory.length}`)

  return checkRecord
}

export function saveCheckHistory(userId: string, data: any): void {
  console.log(`üíæ Saving check history for user: ${userId}`)
  console.log(`üìä Data type: ${data.type}`)
  
  const checkRecord = {
    id: Date.now().toString(),
    userId: userId,
    type: data.type,
    query: data.query,
    date: data.timestamp || new Date().toISOString(),
    status: 'completed',
    totalLeaks: data.results?.DeHashed?.count || 0,
    foundSources: data.results?.DeHashed?.found ? 1 : 0,
    message: data.results?.DeHashed?.found ? '–ü–∞—Ä–æ–ª—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω' : '–ü–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–µ–Ω',
    results: data.results
  }
  
  checkHistory.push(checkRecord)
  console.log(`‚úÖ Saved check history. Total records: ${checkHistory.length}`)
}

export function getCheckHistory(userId: string = 'current-user'): CheckRecord[] {
  console.log(`üîç GET request for user: ${userId}`)
  console.log(`üìä Total checks in history: ${checkHistory.length}`)

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userChecks = checkHistory.filter(check => check.userId === userId)
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  const sortedChecks = userChecks.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

  console.log(`üìã Retrieved ${sortedChecks.length} checks for user: ${userId}`)

  return sortedChecks
}
