import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';
import { TelegramGateway } from '@/lib/telegram-gateway';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
declare global {
  var otpStorage: Map<string, any>;
}

if (!global.otpStorage) {
  global.otpStorage = new Map();
}

export async function POST(request: NextRequest) {
  try {
    const { phone } = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+?[1-9]\d{1,14}$/;
    if (!phoneRegex.test(phone)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }, { status: 400 });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const sessionId = crypto.randomUUID();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –Ω–∞ 5 –º–∏–Ω—É—Ç
    const otpKey = `${phone}_${sessionId}`;
    global.otpStorage.set(otpKey, {
      code,
      createdAt: Date.now(),
      phone,
      verified: false
    });
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      global.otpStorage.delete(otpKey);
    }, 5 * 60 * 1000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Gateway
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    let otpSent = false;
    let botUsername = null;
    
    if (telegramBotToken) {
      const telegramGateway = new TelegramGateway(telegramBotToken);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
      const botValid = await telegramGateway.validateBot();
      if (botValid) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –∫–æ–¥
        const otpResult = await telegramGateway.sendOTPCode(phone, code);
        otpSent = otpResult.success;
        botUsername = otpResult.botUsername;
        
        if (otpSent) {
          console.log('‚úÖ OTP –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        } else {
          console.log('‚ùå OTP –∫–æ–¥ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ù–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É.');
        }
      } else {
        console.warn('‚ö†Ô∏è Telegram Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } else {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log(`üîê OTP –∫–æ–¥ –¥–ª—è ${phone}: ${code} (sessionId: ${sessionId})`);
    
    return NextResponse.json({ 
      success: true,
      sessionId,
      message: otpSent 
        ? '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!' 
        : botUsername 
          ? `–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫ –±–æ—Ç—É @${botUsername}` 
          : '–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
      otpSent,
      botUsername,
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      ...(process.env.NODE_ENV === 'development' && { debug_code: code })
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' }, { status: 500 });
  }
}