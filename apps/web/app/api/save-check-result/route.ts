import { NextRequest, NextResponse } from 'next/server'
import { saveCheckToDatabase, getUserChecks } from '@/lib/supabaseCheckHistory'

export async function POST(request: NextRequest) {
  try {
    console.log('üì• Received save check result request')
    const body = await request.json()
    console.log('üìã Request body:', JSON.stringify(body, null, 2))

    const { type, query, results, totalLeaks, foundSources, message, userId } = body

    if (!userId) {
      return NextResponse.json({
        ok: false,
        error: { message: 'userId is required' }
      }, { status: 400 })
    }

    const checkRecord = await saveCheckToDatabase({
      userId,
      type,
      query,
      results,
      totalLeaks: totalLeaks || 0,
      foundSources: foundSources || 0,
      message: message || ''
    })

    return NextResponse.json({
      ok: true,
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
      checkId: checkRecord.id
    })

  } catch (error: any) {
    console.error('Save check result error:', error)
    
    // –ï—Å–ª–∏ Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (error?.message?.includes('Supabase client not initialized')) {
      console.warn('‚ö†Ô∏è Supabase not configured, skipping save')
      return NextResponse.json({
        ok: true,
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)',
        checkId: Date.now().toString()
      })
    }
    
    return NextResponse.json({
      ok: false,
      error: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞' }
    }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')

    if (!userId) {
      return NextResponse.json({
        ok: false,
        error: { message: 'userId is required' }
      }, { status: 400 })
    }

    const checks = await getUserChecks(userId)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedChecks = checks.map(check => ({
      id: check.id,
      type: check.type,
      query: check.query,
      date: check.created_at,
      status: 'completed',
      totalLeaks: check.total_leaks,
      foundSources: check.found_sources,
      results: check.results
    }))

    return NextResponse.json({
      ok: true,
      checks: formattedChecks
    })

  } catch (error: any) {
    console.error('Get check history error:', error)
    
    // –ï—Å–ª–∏ Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (error?.message?.includes('Supabase client not initialized')) {
      return NextResponse.json({
        ok: true,
        checks: [],
        warning: 'Database not configured'
      })
    }
    
    return NextResponse.json({
      ok: false,
      error: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫' }
    }, { status: 500 })
  }
}
