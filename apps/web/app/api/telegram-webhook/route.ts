import { NextRequest, NextResponse } from 'next/server';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
declare global {
  var telegramUsers: Map<string, { chatId: number; username?: string; firstName?: string }>;
}

if (!global.telegramUsers) {
  global.telegramUsers = new Map();
}

// –ü—Ä–æ—Å—Ç–æ–π webhook –¥–ª—è Telegram –±–æ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–æ–±—â–µ–Ω–∏–µ:', body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (body.message && body.message.text) {
      const chatId = body.message.chat.id;
      const text = body.message.text;
      const firstName = body.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const username = body.message.from?.username;
      
      console.log(`üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${firstName} (${chatId}): ${text}`);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª /start
      if (text.startsWith('/start')) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global.telegramUsers.set(chatId.toString(), {
          chatId,
          username,
          firstName
        });
        
        const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

üîê <b>DataTrace OTP Bot</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ DataTrace.

üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79001234567)
2Ô∏è‚É£ –ù–∞ —Å–∞–π—Ç–µ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ Telegram"  
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ

üí° <b>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>`;

        await sendTelegramMessage(chatId, welcomeMessage);
        
        console.log(`üíæ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: ${chatId} (${firstName})`);
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      else if (text.match(/^\+?\d{10,15}$/)) {
        const phoneNumber = text.replace(/\D/g, '');
        const normalizedPhone = phoneNumber.startsWith('8') ? '7' + phoneNumber.substring(1) : phoneNumber;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –Ω–æ–º–µ—Ä–∞ —Å chat_id
        global.telegramUsers.set(`phone_${normalizedPhone}`, {
          chatId,
          username,
          firstName
        });
        
        console.log(`üìû –ù–æ–º–µ—Ä ${normalizedPhone} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É ${chatId}`);
        
        await sendTelegramMessage(chatId, 
          `‚úÖ –ù–æ–º–µ—Ä <b>${text}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!
          
–¢–µ–ø–µ—Ä—å:
üîπ –ò–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç DataTrace
üîπ –í —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞" –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"
üîπ –ö–æ–¥ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç

üéØ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–¥—ã!`
        );
      }
      // –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      else {
        await sendTelegramMessage(chatId, `ÔøΩ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79001234567
2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤

üí° –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /start`);
      }
    }
    
    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ webhook:', error);
    return NextResponse.json({ error: 'Webhook error' }, { status: 500 });
  }
}

async function sendTelegramMessage(chatId: string | number, message: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return;
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    const result = await response.json();
    console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result.ok);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}