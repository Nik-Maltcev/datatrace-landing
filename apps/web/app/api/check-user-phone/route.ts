import { NextRequest, NextResponse } from 'next/server'
import jwt from 'jsonwebtoken'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    console.log('üîç User phone check request received')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({
        ok: false,
        error: { message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      }, { status: 401 })
    }

    const token = authHeader.substring(7)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let decoded: any
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key')
    } catch (error) {
      return NextResponse.json({
        ok: false,
        error: { message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }
      }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId }
    })

    if (!user || !user.phone) {
      return NextResponse.json({
        ok: false,
        error: { message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
      }, { status: 400 })
    }

    const phone = user.phone
    console.log(`üì± Checking phone: ${phone} for user: ${user.id}`)

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API (Railway)
    const apiUrl = process.env.INTERNAL_API_URL || 'https://datatrace-landing-production.up.railway.app'

    try {
      const response = await fetch(`${apiUrl}/api/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query: phone,
          field: 'phone'
        })
      })

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`)
      }

      const data = await response.json()

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
      const totalLeaks = data.results?.reduce((sum: number, step: any) => {
        if (!step.ok || !step.items) return sum

        if (step.name === 'ITP' && typeof step.items === 'object') {
          return sum + Object.values(step.items).reduce((itemSum: number, items: any) => {
            return itemSum + (Array.isArray(items) ? items.length : 0)
          }, 0)
        } else if (Array.isArray(step.items)) {
          return sum + step.items.length
        }
        return sum
      }, 0) || 0

      const foundSources = data.results?.filter((step: any) => step.ok && step.items &&
        (Array.isArray(step.items) ? step.items.length > 0 : Object.keys(step.items).length > 0)
      ).length || 0

      return NextResponse.json({
        ok: true,
        phone: phone,
        totalLeaks,
        foundSources,
        results: data.results || [],
        message: totalLeaks > 0
          ? `–ù–∞–π–¥–µ–Ω–æ ${totalLeaks} —É—Ç–µ—á–µ–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ ${foundSources} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`
          : '–£—Ç–µ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        timestamp: new Date().toISOString()
      })
    } catch (apiError) {
      console.error('Internal API call failed:', apiError)
      return NextResponse.json({
        ok: false,
        error: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞' }
      }, { status: 500 })
    }

  } catch (error) {
    console.error('User phone check error:', error)
    return NextResponse.json({
      ok: false,
      error: { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }
    }, { status: 500 })
  }
}
