import { NextRequest, NextResponse } from 'next/server'
import jwt from 'jsonwebtoken'
import { PrismaClient } from '@prisma/client'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ API
const searchITP = require('../../../../api/src/services/itp')
const searchDyxless = require('../../../../api/src/services/dyxless')
const searchLeakOsint = require('../../../../api/src/services/leakosint')
const searchUsersbox = require('../../../../api/src/services/usersbox')
const searchVektor = require('../../../../api/src/services/vektor')

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    console.log('üîç User phone check request received')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({
        ok: false,
        error: { message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      }, { status: 401 })
    }

    const token = authHeader.substring(7)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let decoded: any
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key')
    } catch (error) {
      return NextResponse.json({
        ok: false,
        error: { message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }
      }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId }
    })

    if (!user || !user.phone) {
      return NextResponse.json({
        ok: false,
        error: { message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
      }, { status: 400 })
    }

    const phone = user.phone
    console.log(`üì± Checking phone: ${phone} for user: ${user.id}`)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    const steps = []
    const finalQuery = phone.replace(/[\s\-\(\)]/g, '') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    
    for (const [idx, fn] of [searchITP, searchDyxless, searchLeakOsint, searchUsersbox, searchVektor].entries()) {
      const result = idx === 0 ? await fn(finalQuery, 'phone') : await fn(finalQuery)
      steps.push(result)
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
    const totalLeaks = steps.reduce((sum, step) => {
      if (!step.ok || !step.items) return sum
      
      if (step.name === 'ITP' && typeof step.items === 'object') {
        return sum + Object.values(step.items).reduce((itemSum: number, items: any) => {
          return itemSum + (Array.isArray(items) ? items.length : 0)
        }, 0)
      } else if (Array.isArray(step.items)) {
        return sum + step.items.length
      }
      return sum
    }, 0)

    const foundSources = steps.filter(step => step.ok && step.items && 
      (Array.isArray(step.items) ? step.items.length > 0 : Object.keys(step.items).length > 0)
    ).length

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    return NextResponse.json({
      ok: true,
      phone: finalQuery,
      totalLeaks,
      foundSources,
      results: steps,
      message: totalLeaks > 0 
        ? `–ù–∞–π–¥–µ–Ω–æ ${totalLeaks} —É—Ç–µ—á–µ–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ ${foundSources} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`
        : '–£—Ç–µ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('User phone check error:', error)
    return NextResponse.json({
      ok: false,
      error: { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }
    }, { status: 500 })
  }
}
