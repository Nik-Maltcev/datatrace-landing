import { NextRequest, NextResponse } from 'next/server'

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY
const DEEPSEEK_BASE_URL = process.env.DEEPSEEK_BASE_URL || 'https://api.deepseek.com'

export async function POST(request: NextRequest) {
  try {
    const { checks } = await request.json()

    if (!checks || !Array.isArray(checks)) {
      return NextResponse.json({ error: 'Invalid checks data' }, { status: 400 })
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisData = prepareAnalysisData(checks)

    // –ï—Å–ª–∏ –µ—Å—Ç—å DeepSeek API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if (DEEPSEEK_API_KEY) {
      try {
        const aiAnalysis = await generateDeepSeekAnalysis(analysisData)
        return NextResponse.json(aiAnalysis)
      } catch (error) {
        console.error('DeepSeek analysis failed, using fallback:', error)
      }
    }

    // Fallback –∞–Ω–∞–ª–∏–∑
    const fallbackAnalysis = generateFallbackAnalysis(analysisData)
    return NextResponse.json(fallbackAnalysis)

  } catch (error) {
    console.error('AI analysis error:', error)
    return NextResponse.json({ error: 'Analysis failed' }, { status: 500 })
  }
}

function prepareAnalysisData(checks: any[]) {
  const totalLeaks = checks.reduce((sum, check) => 
    sum + check.results.reduce((s: number, r: any) => s + (r.count || 0), 0), 0
  )
  
  const compromisedSources = Array.from(new Set(
    checks.flatMap(check => 
      check.results.filter((r: any) => r.found).map((r: any) => r.source || r.name)
    )
  ))

  const sourceBreakdown = compromisedSources.map((source, idx) => ({
    name: source,
    value: checks.reduce((sum, check) => {
      const sourceResult = check.results.find((r: any) => (r.source || r.name) === source)
      return sum + (sourceResult?.count || 0)
    }, 0),
    color: ['#ef4444', '#f97316', '#eab308', '#22c55e', '#3b82f6', '#8b5cf6'][idx % 6]
  }))

  const trends = generateTrendData(checks)
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const detailedLeaks = analyzeLeakDetails(checks)

  return {
    totalLeaks,
    compromisedSources,
    sourceBreakdown,
    trends,
    checksCount: checks.length,
    recentChecks: checks.slice(-5),
    detailedLeaks
  }
}

function analyzeLeakDetails(checks: any[]) {
  const leakDetails = {
    emailsFound: new Set(),
    phonesFound: new Set(),
    passwordsFound: new Set(),
    sitesWithPasswords: new Set(),
    socialNetworks: new Set(),
    financialServices: new Set(),
    governmentServices: new Set()
  }

  checks.forEach(check => {
    check.results.forEach((result: any) => {
      if (result.found && (result.items || result.data)) {
        const sourceName = result.source || result.name
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ç–µ—á–µ–∫
        const items = Array.isArray(result.items) ? result.items : 
                     result.data ? Object.values(result.data).flat() : []
        
        items.forEach((item: any) => {
          if (item.email) leakDetails.emailsFound.add(item.email)
          if (item.phone) leakDetails.phonesFound.add(item.phone)
          if (item.password) {
            leakDetails.passwordsFound.add(item.password)
            leakDetails.sitesWithPasswords.add(sourceName)
          }
          
          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤
          if (sourceName.toLowerCase().includes('vk') || 
              sourceName.toLowerCase().includes('facebook') ||
              sourceName.toLowerCase().includes('instagram') ||
              sourceName.toLowerCase().includes('twitter')) {
            leakDetails.socialNetworks.add(sourceName)
          }
          
          if (sourceName.toLowerCase().includes('bank') ||
              sourceName.toLowerCase().includes('pay') ||
              sourceName.toLowerCase().includes('wallet')) {
            leakDetails.financialServices.add(sourceName)
          }
          
          if (sourceName.toLowerCase().includes('gov') ||
              sourceName.toLowerCase().includes('–≥–æ—Å—É—Å–ª—É–≥–∏') ||
              sourceName.toLowerCase().includes('–Ω–∞–ª–æ–≥')) {
            leakDetails.governmentServices.add(sourceName)
          }
        })
      }
    })
  })

  return {
    emailsFound: Array.from(leakDetails.emailsFound),
    phonesFound: Array.from(leakDetails.phonesFound),
    passwordsFound: Array.from(leakDetails.passwordsFound),
    sitesWithPasswords: Array.from(leakDetails.sitesWithPasswords),
    socialNetworks: Array.from(leakDetails.socialNetworks),
    financialServices: Array.from(leakDetails.financialServices),
    governmentServices: Array.from(leakDetails.governmentServices)
  }
}

function generateTrendData(checks: any[]) {
  const monthlyData: { [key: string]: number } = {}
  
  checks.forEach(check => {
    const month = new Date(check.date).toLocaleDateString('ru-RU', { year: 'numeric', month: 'short' })
    const leaks = check.results.reduce((sum: number, r: any) => sum + (r.count || 0), 0)
    monthlyData[month] = (monthlyData[month] || 0) + leaks
  })

  return Object.entries(monthlyData).map(([month, leaks]) => ({ month, leaks }))
}

async function generateDeepSeekAnalysis(data: any) {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
- –í—Å–µ–≥–æ —É—Ç–µ—á–µ–∫: ${data.totalLeaks}
- –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${data.compromisedSources.length}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${data.checksCount}
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${data.compromisedSources.join(', ')}
- –ù–∞–π–¥–µ–Ω–Ω—ã–µ email: ${data.detailedLeaks.emailsFound.length}
- –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: ${data.detailedLeaks.phonesFound.length}
- –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏: ${data.detailedLeaks.passwordsFound.length}
- –°–∞–π—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏: ${data.detailedLeaks.sitesWithPasswords.join(', ')}
- –°–æ—Ü—Å–µ—Ç–∏: ${data.detailedLeaks.socialNetworks.join(', ')}
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${data.detailedLeaks.financialServices.join(', ')}
- –ì–æ—Å—É—Å–ª—É–≥–∏: ${data.detailedLeaks.governmentServices.join(', ')}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "riskLevel": "low|medium|high",
  "totalLeaks": ${data.totalLeaks},
  "compromisedSources": ${JSON.stringify(data.compromisedSources)},
  "recommendations": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–¥–µ –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª–∏"],
  "trends": ${JSON.stringify(data.trends)},
  "sourceBreakdown": ${JSON.stringify(data.sourceBreakdown)},
  "analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É–≥—Ä–æ–∑ –∏ –¥–µ–π—Å—Ç–≤–∏–π",
  "lastUpdated": "${new Date().toISOString()}",
  "priorityActions": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"]
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£–∫–∞–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–û –≥–¥–µ –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ (—Å–æ—Ü—Å–µ—Ç–∏, –±–∞–Ω–∫–∏, –≥–æ—Å—É—Å–ª—É–≥–∏)
- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
- –î–∞–π —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Ç–µ—á–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`

  const response = await fetch(`${DEEPSEEK_BASE_URL}/v1/chat/completions`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ç–µ—á–∫–∞—Ö –∏ –¥–∞–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.3
    })
  })

  if (!response.ok) {
    throw new Error(`DeepSeek API error: ${response.status}`)
  }

  const result = await response.json()
  const content = result.choices[0]?.message?.content

  if (!content) {
    throw new Error('No content from DeepSeek')
  }

  try {
    return JSON.parse(content)
  } catch (error) {
    console.error('Failed to parse DeepSeek JSON:', error)
    throw error
  }
}

function generateFallbackAnalysis(data: any) {
  const riskLevel = data.totalLeaks > 50 ? 'high' : data.totalLeaks > 10 ? 'medium' : 'low'
  
  const recommendations = []
  const priorityActions = []
  
  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
  if (data.detailedLeaks.financialServices.length > 0) {
    recommendations.push(`üè¶ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö: ${data.detailedLeaks.financialServices.join(', ')}`)
    priorityActions.push('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–Ω–∫–∞—Ö –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö')
  }
  
  if (data.detailedLeaks.governmentServices.length > 0) {
    recommendations.push(`üèõÔ∏è –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö: ${data.detailedLeaks.governmentServices.join(', ')}`)
    priorityActions.push('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö')
  }
  
  if (data.detailedLeaks.socialNetworks.length > 0) {
    recommendations.push(`üì± –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö: ${data.detailedLeaks.socialNetworks.join(', ')}`)
    priorityActions.push('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö')
  }
  
  if (data.detailedLeaks.sitesWithPasswords.length > 0) {
    recommendations.push(`üîê –ù–∞–π–¥–µ–Ω—ã —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –æ—Ç —Å–∞–π—Ç–æ–≤: ${data.detailedLeaks.sitesWithPasswords.join(', ')}. –°–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`)
  }
  
  if (data.detailedLeaks.emailsFound.length > 0) {
    recommendations.push(`üìß –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã email –∞–¥—Ä–µ—Å–∞: ${data.detailedLeaks.emailsFound.slice(0, 3).join(', ')}${data.detailedLeaks.emailsFound.length > 3 ? '...' : ''}. –í–∫–ª—é—á–∏—Ç–µ 2FA –≤–µ–∑–¥–µ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ`)
  }
  
  if (data.detailedLeaks.phonesFound.length > 0) {
    recommendations.push(`üìû –°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ –µ—Å–ª–∏ —É—Ç–µ—á–µ–∫ –º–Ω–æ–≥–æ`)
  }
  
  if (data.totalLeaks > 0) {
    recommendations.push('üõ°Ô∏è –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–µ–∑–¥–µ, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ')
    recommendations.push('üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π')
  }
  
  if (data.totalLeaks > 50) {
    recommendations.push('‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
    recommendations.push('üåê –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –¥–ª—è –∑–∞—â–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞')
    priorityActions.push('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
  }
  
  recommendations.push('üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —É—Ç–µ—á–µ–∫')

  const analysis = data.totalLeaks === 0 
    ? '–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.'
    : `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${data.totalLeaks} –∑–∞–ø–∏—Å–µ–π –≤ ${data.compromisedSources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. ${data.detailedLeaks.financialServices.length > 0 ? '–ö–†–ò–¢–ò–ß–ù–û: –Ω–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö! ' : ''}${data.detailedLeaks.passwordsFound.length > 0 ? `–°–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.detailedLeaks.passwordsFound.length} –ø–∞—Ä–æ–ª–µ–π. ` : ''}–¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—â–∏—Ç–µ.`

  return {
    riskLevel,
    totalLeaks: data.totalLeaks,
    compromisedSources: data.compromisedSources,
    recommendations,
    trends: data.trends,
    sourceBreakdown: data.sourceBreakdown,
    analysis,
    priorityActions,
    lastUpdated: new Date().toISOString()
  }
}