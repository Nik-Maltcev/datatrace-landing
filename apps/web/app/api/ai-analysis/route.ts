import { NextRequest, NextResponse } from 'next/server'

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY
const DEEPSEEK_BASE_URL = 'https://api.deepseek.com'

export async function POST(request: NextRequest) {
  try {
    console.log('ü§ñ AI Analysis request received')
    
    if (!DEEPSEEK_API_KEY) {
      return NextResponse.json({
        ok: false,
        error: 'DeepSeek API key not configured'
      }, { status: 500 })
    }

    const body = await request.json()
    const { checkHistory } = body

    if (!checkHistory || !Array.isArray(checkHistory)) {
      return NextResponse.json({
        ok: false,
        error: 'Check history is required'
      }, { status: 400 })
    }

    console.log(`üìä Analyzing ${checkHistory.length} checks`)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisData = prepareAnalysisData(checkHistory)
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
    const prompt = buildAnalysisPrompt(analysisData)
    
    console.log('üîç Sending request to DeepSeek...')
    
    const response = await fetch(`${DEEPSEEK_BASE_URL}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: getSystemPrompt()
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        max_tokens: 4000,
        temperature: 0.3,
        top_p: 0.9
      })
    })

    if (!response.ok) {
      throw new Error(`DeepSeek API error: ${response.status}`)
    }

    const data = await response.json()
    const aiAnalysis = data.choices?.[0]?.message?.content

    if (!aiAnalysis) {
      throw new Error('Empty response from DeepSeek')
    }

    console.log('‚úÖ AI Analysis completed')

    return NextResponse.json({
      ok: true,
      analysis: aiAnalysis,
      model: 'deepseek-chat',
      timestamp: new Date().toISOString(),
      usage: data.usage
    })

  } catch (error) {
    console.error('‚ùå AI Analysis error:', error)
    return NextResponse.json({
      ok: false,
      error: error instanceof Error ? error.message : 'AI Analysis failed'
    }, { status: 500 })
  }
}

function prepareAnalysisData(checkHistory: any[]) {
  return checkHistory.map(check => ({
    type: check.type,
    query: check.query,
    date: check.date,
    totalLeaks: check.totalLeaks,
    foundSources: check.foundSources,
    sources: check.results?.map((result: any) => ({
      name: result.source,
      found: result.found,
      count: result.count,
      hasData: !!result.items
    })) || []
  }))
}

function buildAnalysisPrompt(analysisData: any[]) {
  let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n`
  
  analysisData.forEach((check, index) => {
    prompt += `=== –ü—Ä–æ–≤–µ—Ä–∫–∞ ${index + 1} ===\n`
    prompt += `–¢–∏–ø: ${check.type === 'phone' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : 'Email'}\n`
    prompt += `–ó–∞–ø—Ä–æ—Å: ${check.query}\n`
    prompt += `–î–∞—Ç–∞: ${new Date(check.date).toLocaleDateString('ru-RU')}\n`
    prompt += `–ù–∞–π–¥–µ–Ω–æ —É—Ç–µ—á–µ–∫: ${check.totalLeaks}\n`
    prompt += `–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: ${check.foundSources}\n`
    
    if (check.sources.length > 0) {
      prompt += `–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n`
      check.sources.forEach((source: any) => {
        prompt += `- ${source.name}: ${source.found ? `${source.count} –∑–∞–ø–∏—Å–µ–π` : '—á–∏—Å—Ç–æ'}\n`
      })
    }
    prompt += `\n`
  })

  prompt += `\n–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:

## üîç –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º  
- –ö–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–∞—â–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —É—Ç–µ—á–∫–∏
- –°–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

## ‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, üü† –í—ã—Å–æ–∫–∏–π, üü° –°—Ä–µ–¥–Ω–∏–π)

## üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞)
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—â–∏—Ç—ã
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —É—Ç–µ—á–∫–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π markdown –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.`

  return prompt
}

function getSystemPrompt() {
  return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ç–µ—á–µ–∫.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown —Å —ç–º–æ–¥–∑–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
- –ë—É–¥—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º`
}