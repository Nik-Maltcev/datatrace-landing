import { NextRequest, NextResponse } from 'next/server'
import axios from 'axios'
import crypto from 'crypto'
import { saveCheckHistory } from '../../../lib/checkHistory'

const DEHASHED_API_KEY = process.env.DEHASHED_API_KEY || 'your_dehashed_api_key'
const DEHASHED_BASE = 'https://api.dehashed.com'

export async function POST(request: NextRequest) {
  try {
    console.log('üîê Password check request received')

    const body = await request.json()
    const { password, userEmail } = body

    if (!password) {
      return NextResponse.json({
        ok: false,
        error: { message: '–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω' }
      }, { status: 400 })
    }

    if (!DEHASHED_API_KEY || DEHASHED_API_KEY === 'your_dehashed_api_key') {
      return NextResponse.json({
        ok: false,
        error: { message: 'DeHashed API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
      }, { status: 500 })
    }

    console.log(`üîç Checking password hash...`)

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤ SHA-256 –¥–ª—è DeHashed v2 API
    const passwordHash = crypto.createHash('sha256').update(password).digest('hex')
    console.log(`üîê Password SHA256 hash: ${passwordHash.slice(0, 10)}...`)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DeHashed v2 API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π
      const response = await axios.post(`${DEHASHED_BASE}/v2/search-password`, {
        sha256_hashed_password: passwordHash
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Dehashed-Api-Key': DEHASHED_API_KEY
        },
        timeout: 15000
      })

      const data = response.data || {}
      console.log(`üìä DeHashed response:`, {
        results_found: data.results_found || 0
      })

      const isCompromised = (data.results_found || 0) > 0
      const breachCount = data.results_found || 0

      let detailedResults = []
      let uniqueDatabases = new Set()

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (isCompromised) {
        try {
          const searchResponse = await axios.post(`${DEHASHED_BASE}/v2/search`, {
            query: `password:${password}`,
            page: 1,
            size: 100,
            de_dupe: true
          }, {
            headers: {
              'Content-Type': 'application/json',
              'Dehashed-Api-Key': DEHASHED_API_KEY
            },
            timeout: 15000
          })

          detailedResults = searchResponse.data.entries || []
          
          // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          detailedResults.forEach(entry => {
            if (entry.database_name) {
              uniqueDatabases.add(entry.database_name)
            }
          })
        } catch (searchError) {
          console.log('‚ö†Ô∏è Could not get detailed results:', searchError.message)
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      if (userEmail) {
        console.log('üíæ Saving password check history...')
        console.log('üìä Detailed results count:', detailedResults.length)
        console.log('üóÑÔ∏è Unique databases:', Array.from(uniqueDatabases))
        
        const historyData = {
          type: 'password',
          query: '***—Å–∫—Ä—ã—Ç–æ***',
          timestamp: new Date().toISOString(),
          results: {
            DeHashed: {
              found: isCompromised,
              count: breachCount,
              databases: Array.from(uniqueDatabases),
              entries: detailedResults.map(entry => {
                console.log('üìù Processing entry:', {
                  database_name: entry.database_name,
                  email: entry.email,
                  username: entry.username,
                  hasPassword: !!entry.password
                })
                return {
                  ...entry,
                  password: ['***—Å–∫—Ä—ã—Ç–æ***']
                }
              })
            }
          }
        }

        console.log('üíæ Final history data structure:', JSON.stringify(historyData, null, 2))

        try {
          await saveCheckHistory(userEmail, historyData)
          console.log('‚úÖ Password check history saved successfully')
        } catch (historyError) {
          console.error('‚ùå Failed to save history:', historyError)
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = []
      if (isCompromised) {
        recommendations.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö!')
        recommendations.push('–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≥–¥–µ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
        if (breachCount > 1) {
          recommendations.push(`–ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ ${breachCount} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö`)
        }
        if (uniqueDatabases.size > 0) {
          recommendations.push(`–ù–∞–π–¥–µ–Ω –≤ ${uniqueDatabases.size} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö`)
        }
        recommendations.push('–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö')
      } else {
        recommendations.push('‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö')
        recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      }
      recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π')

      const message = isCompromised 
        ? `–ü–∞—Ä–æ–ª—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω! –ù–∞–π–¥–µ–Ω–æ ${breachCount} –∑–∞–ø–∏—Å–µ–π –≤ ${uniqueDatabases.size || 1} –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö`
        : '–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö'

      return NextResponse.json({
        ok: true,
        isCompromised,
        breachCount,
        databaseCount: uniqueDatabases.size,
        databases: Array.from(uniqueDatabases),
        recommendations,
        message,
        timestamp: new Date().toISOString()
      })

    } catch (apiError: any) {
      console.error('‚ùå DeHashed API error:', apiError)
      
      if (apiError.response?.status === 401) {
        return NextResponse.json({
          ok: false,
          error: { message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ DeHashed API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.' }
        }, { status: 401 })
      }

      if (apiError.response?.status === 429) {
        return NextResponse.json({
          ok: false,
          error: { message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ DeHashed API' }
        }, { status: 429 })
      }

      if (apiError.response?.status === 403) {
        return NextResponse.json({
          ok: false,
          error: { message: '–î–æ—Å—Ç—É–ø –∫ DeHashed API –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.' }
        }, { status: 403 })
      }

      return NextResponse.json({
        ok: false,
        error: { message: `–û—à–∏–±–∫–∞ DeHashed API: ${apiError.message}` }
      }, { status: 500 })
    }

  } catch (error) {
    console.error('Password check error:', error)
    return NextResponse.json({
      ok: false,
      error: { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }
    }, { status: 500 })
  }
}