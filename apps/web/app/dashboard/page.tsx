"use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/hooks/use-auth"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import PhoneVerification from "@/components/PhoneVerification"
import {
  Search,
  Shield,
  Activity,
  AlertTriangle,
  CheckCircle,
  Phone,
  Mail,
  Loader2,
  ArrowRight,
  Clock,
  Zap
} from "lucide-react"
import Link from "next/link"

interface LeakResult {
  name: string
  source?: string
  found: boolean
  count?: number
  ok?: boolean
  error?: any
}

interface CheckResponse {
  ok?: boolean
  phone?: string
  email?: string
  totalLeaks?: number
  foundSources?: number
  results?: LeakResult[]
  message?: string
  found?: boolean
  error?: string
}

export default function Dashboard() {
  const { user, logout } = useAuth()
  const [isPhoneVerified, setIsPhoneVerified] = useState(false)
  const [phoneResult, setPhoneResult] = useState<CheckResponse | null>(null)
  const [emailResult, setEmailResult] = useState<CheckResponse | null>(null)
  const [isCheckingPhone, setIsCheckingPhone] = useState(false)
  const [isCheckingEmail, setIsCheckingEmail] = useState(false)

  useEffect(() => {
    if (user?.phone) {
      // Check if phone is verified
      setIsPhoneVerified(user.phoneVerified || false)
    }
  }, [user])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const verificationToken = localStorage.getItem('phone_verification_token')
    const verifiedPhone = localStorage.getItem('verified_phone')
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (verificationToken && verifiedPhone && user?.phone && verifiedPhone !== user.phone) {
      console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é')
      localStorage.removeItem('phone_verification_token')
      localStorage.removeItem('verified_phone')
      setIsPhoneVerified(false)
    } else if (verificationToken && (!user?.phone || verifiedPhone === user?.phone)) {
      setIsPhoneVerified(true)
    }
  }, [user?.phone])

  const handleCheckPhoneLeaks = async () => {
    console.log('üöÄ Starting phone check for user:', user)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!isPhoneVerified) {
      setPhoneResult({ error: "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" })
      return
    }

    if (!user?.phone) {
      setPhoneResult({ error: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ" })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (user.checksUsed >= user.checksLimit) {
      alert('–õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.')
      return
    }

    console.log('üì± Checking phone:', user.phone)

    setIsCheckingPhone(true)
    setPhoneResult(null)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
      const response = await fetch('/api/check-user-phone', {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          phone: user.phone,
          userId: user.email
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
      }

      const data = await response.json()
      console.log('üì± Phone check API response:', data)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const transformedResults = data.results?.map((result: any) => ({
        name: result.name,
        source: result.name,
        found: result.ok && (
          Array.isArray(result.items) ? result.items.length > 0 :
          (typeof result.items === 'object' && result.items !== null) ? Object.keys(result.items).length > 0 :
          false
        ),
        count: Array.isArray(result.items) ? result.items.length :
               (typeof result.items === 'object' && result.items !== null) ?
               Object.values(result.items).reduce((sum: number, items: any) => sum + (Array.isArray(items) ? items.length : 0), 0) : 0,
        ok: result.ok,
        error: result.error
      })) || []

      setPhoneResult({
        ok: data.ok,
        phone: data.phone,
        totalLeaks: data.totalLeaks,
        foundSources: data.foundSources,
        results: transformedResults,
        message: data.message,
        found: data.totalLeaks > 0
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ localStorage
      if (user) {
        const updatedUser = { ...user, checksUsed: (user.checksUsed || 0) + 1 }
        localStorage.setItem('user', JSON.stringify(updatedUser))
      }

    } catch (error) {
      console.error("Phone check error:", error)
      setPhoneResult({ error: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞" })
    } finally {
      setIsCheckingPhone(false)
    }
  }

  const handleCheckEmailLeaks = async () => {
    console.log('üöÄ Starting email check for user:', user)

    if (!user?.email) {
      setEmailResult({ error: "Email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ" })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (user.checksUsed >= user.checksLimit) {
      alert('–õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.')
      return
    }

    console.log('üìß Checking email:', user.email)

    setIsCheckingEmail(true)
    setEmailResult(null)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
      const response = await fetch('/api/check-user-email', {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          email: user.email,
          userId: user.email
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email")
      }

      const data = await response.json()
      console.log('üìß Email check API response:', data)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const transformedResults = data.results?.map((result: any) => ({
        name: result.name,
        source: result.name,
        found: result.ok && (
          Array.isArray(result.items) ? result.items.length > 0 :
          (typeof result.items === 'object' && result.items !== null) ? Object.keys(result.items).length > 0 :
          false
        ),
        count: Array.isArray(result.items) ? result.items.length :
               (typeof result.items === 'object' && result.items !== null) ?
               Object.values(result.items).reduce((sum: number, items: any) => sum + (Array.isArray(items) ? items.length : 0), 0) : 0,
        ok: result.ok,
        error: result.error
      })) || []

      setEmailResult({
        ok: data.ok,
        email: data.email,
        totalLeaks: data.totalLeaks,
        foundSources: data.foundSources,
        results: transformedResults,
        message: data.message,
        found: data.totalLeaks > 0
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ localStorage
      if (user) {
        const updatedUser = { ...user, checksUsed: (user.checksUsed || 0) + 1 }
        localStorage.setItem('user', JSON.stringify(updatedUser))
      }

    } catch (error) {
      console.error("Email check error:", error)
      setEmailResult({ error: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–æ email" })
    } finally {
      setIsCheckingEmail(false)
    }
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-900">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    )
  }

  return (
    <div className="p-8">
      {/* Welcome Section */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}
        </h1>
        <p className="text-gray-600">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <Card className="border-blue-200 bg-gradient-to-br from-blue-50 to-blue-100">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                <Activity className="h-5 w-5 text-white" />
              </div>
              <Badge variant="secondary" className="bg-blue-100 text-blue-700 border-blue-200">
                {user.plan === 'professional' ? '–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô' : 
                 user.plan === 'basic' ? '–ë–ê–ó–û–í–´–ô' : '–ë–ï–°–ü–õ–ê–¢–ù–´–ô'}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold text-gray-900 mb-1">
              {user.checksUsed ?? 0}/{user.checksLimit ?? 0}
            </p>
            <p className="text-sm text-blue-700">–ü—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</p>
          </CardContent>
        </Card>

        <Card className="border-green-200 bg-gradient-to-br from-green-50 to-green-100">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                <Shield className="h-5 w-5 text-white" />
              </div>
              <Badge variant="secondary" className="bg-green-100 text-green-700 border-green-200">
                –ê–∫—Ç–∏–≤–µ–Ω
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold text-gray-900 mb-1">24/7</p>
            <p className="text-sm text-green-700">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö</p>
          </CardContent>
        </Card>

        <Card className="border-purple-200 bg-gradient-to-br from-purple-50 to-purple-100">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <div className="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center">
                <Clock className="h-5 w-5 text-white" />
              </div>
              <Badge variant="secondary" className="bg-purple-100 text-purple-700 border-purple-200">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold text-gray-900 mb-1">–°–µ–≥–æ–¥–Ω—è</p>
            <p className="text-sm text-purple-700">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</p>
          </CardContent>
        </Card>
      </div>

      {/* Action Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                <Phone className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω</CardTitle>
                <p className="text-sm text-gray-500">–ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              {user.phone ? `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ${user.phone}` : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"}
            </p>
            <Button 
              onClick={handleCheckPhoneLeaks}
              disabled={!user.phone || isCheckingPhone || !isPhoneVerified || (user.checksUsed >= user.checksLimit)}
              className="w-full"
            >
              {isCheckingPhone ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ü—Ä–æ–≤–µ—Ä—è—é...
                </>
              ) : !isPhoneVerified ? (
                <>
                  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
                  <Shield className="h-4 w-4 ml-2" />
                </>
              ) : (user.checksUsed >= user.checksLimit) ? (
                <>
                  –õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
                  <AlertTriangle className="h-4 w-4 ml-2" />
                </>
              ) : (
                <>
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä
                  <Phone className="h-4 w-4 ml-2" />
                </>
              )}
            </Button>
            {phoneResult && (
              <div className={`mt-3 p-4 rounded-lg border ${
                phoneResult.error ? 'bg-red-50 border-red-200' :
                phoneResult.found ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'
              }`}>
                {phoneResult.error ? (
                  <p className="text-sm text-red-600">{phoneResult.error}</p>
                ) : (
                  <>
                    <div className="flex items-center justify-between mb-2">
                      <p className="text-sm font-medium">
                        {phoneResult.found ? (
                          <>
                            <AlertTriangle className="inline h-4 w-4 mr-1 text-red-600" />
                            –ù–∞–π–¥–µ–Ω–æ —É—Ç–µ—á–µ–∫: {phoneResult.totalLeaks}
                          </>
                        ) : (
                          <>
                            <CheckCircle className="inline h-4 w-4 mr-1 text-green-600" />
                            –£—Ç–µ—á–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                          </>
                        )}
                      </p>
                    </div>
                    {phoneResult.found && phoneResult.results && (
                      <div className="mt-3 space-y-2">
                        {phoneResult.results.filter(r => r.found).map((result, idx) => (
                          <div key={idx} className="bg-white p-3 rounded border">
                            <div className="flex items-center justify-between">
                              <span className="font-medium text-sm">{result.source}</span>
                              <Badge variant="destructive" className="text-xs">
                                {result.count} –∑–∞–ø–∏—Å–µ–π
                              </Badge>
                            </div>
                            <p className="text-xs text-gray-600 mt-1">
                              –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                            </p>
                          </div>
                        ))}
                      </div>
                    )}
                  </>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                <Mail className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Email</CardTitle>
                <p className="text-sm text-gray-500">–ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ email –∞–¥—Ä–µ—Å–∞</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å {user.email}
            </p>
            <Button 
              onClick={handleCheckEmailLeaks}
              disabled={isCheckingEmail || (user.checksUsed >= user.checksLimit)}
              className="w-full"
              variant="outline"
            >
              {isCheckingEmail ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ü—Ä–æ–≤–µ—Ä—è—é...
                </>
              ) : (user.checksUsed >= user.checksLimit) ? (
                <>
                  –õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
                  <AlertTriangle className="h-4 w-4 ml-2" />
                </>
              ) : (
                <>
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å email
                  <Mail className="h-4 w-4 ml-2" />
                </>
              )}
            </Button>
            {emailResult && (
              <div className={`mt-3 p-4 rounded-lg border ${
                emailResult.error ? 'bg-red-50 border-red-200' :
                emailResult.found ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'
              }`}>
                {emailResult.error ? (
                  <p className="text-sm text-red-600">{emailResult.error}</p>
                ) : (
                  <>
                    <div className="flex items-center justify-between mb-2">
                      <p className="text-sm font-medium">
                        {emailResult.found ? (
                          <>
                            <AlertTriangle className="inline h-4 w-4 mr-1 text-red-600" />
                            –ù–∞–π–¥–µ–Ω–æ —É—Ç–µ—á–µ–∫: {emailResult.totalLeaks}
                          </>
                        ) : (
                          <>
                            <CheckCircle className="inline h-4 w-4 mr-1 text-green-600" />
                            –£—Ç–µ—á–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                          </>
                        )}
                      </p>
                    </div>
                    {emailResult.found && emailResult.results && (
                      <div className="mt-3 space-y-2">
                        {emailResult.results.filter(r => r.found).map((result, idx) => (
                          <div key={idx} className="bg-white p-3 rounded border">
                            <div className="flex items-center justify-between">
                              <span className="font-medium text-sm">{result.source}</span>
                              <Badge variant="destructive" className="text-xs">
                                {result.count} –∑–∞–ø–∏—Å–µ–π
                              </Badge>
                            </div>
                            <p className="text-xs text-gray-600 mt-1">
                              –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –≤–∞—à–∏–º email –∞–¥—Ä–µ—Å–æ–º
                            </p>
                          </div>
                        ))}
                      </div>
                    )}
                  </>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                <Search className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫</CardTitle>
                <p className="text-sm text-gray-500">–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–º–∏
            </p>
            <Link href="/dashboard/checks">
              <Button variant="outline" className="w-full">
                –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                <ArrowRight className="h-4 w-4 ml-2" />
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>

      {/* Additional Services */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                <Zap className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–º</CardTitle>
                <p className="text-sm text-gray-500">–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
            </p>
            <Link href="/payment">
              <Button variant="outline" className="w-full">
                –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ–æ–º
                <ArrowRight className="h-4 w-4 ml-2" />
              </Button>
            </Link>
          </CardContent>
        </Card>

        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                <Shield className="h-6 w-6 text-orange-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö</CardTitle>
                <p className="text-sm text-gray-500">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            </p>
            <Button variant="outline" className="w-full" disabled>
              –°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Phone Verification Section */}
      {user.phone && !isPhoneVerified && (
        <Card className="border-yellow-200 bg-yellow-50">
          <CardContent className="pt-6">
            <div className="flex items-center space-x-3 mb-4">
              <AlertTriangle className="h-5 w-5 text-yellow-600" />
              <h3 className="font-semibold text-yellow-800">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h3>
            </div>
            <p className="text-yellow-700 mb-4">
              –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            </p>
            <PhoneVerification />
          </CardContent>
        </Card>
      )}
    </div>
  )
}