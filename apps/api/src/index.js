const path = require('path');
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const OpenAI = require('openai'); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è DeepSeek V3 (OpenAI-compatible API)
const ErrorHandler = require('./utils/ErrorHandler');
const AuthService = require('./services/AuthService');
const DeHashedService = require('./services/DeHashedService');
const { requireAuth, optionalAuth, requireAdmin, userRateLimit, authService } = require('./middleware/auth');
require('dotenv').config();

const app = express();
// Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Railway
console.log('üîß Environment Debug Info:');
console.log('- NODE_ENV:', process.env.NODE_ENV);
console.log('- PORT from env:', process.env.PORT);
console.log('- Working directory:', process.cwd());
console.log('- Platform:', process.platform);
console.log('- Node version:', process.version);
console.log('- Memory usage:', process.memoryUsage());

const PORT = process.env.PORT || 3001; // Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ä—Ç
console.log('- PORT resolved:', PORT);

app.use(cors());
app.use(express.json({ limit: '2mb' }));
app.use(express.static(path.join(__dirname, '..', 'public')));

// Load tokens from env or fallback to docs (for local demo only)
const TOKENS = {
  ITP: process.env.ITP_TOKEN || '91b2c57abce2ca84f8ca068df2eda054',
  DYXLESS: process.env.DYXLESS_TOKEN || '38a634df-2317-4c8c-beb7-7ca4fd97f1e1',
  LEAKOSINT: process.env.LEAKOSINT_TOKEN || '466496291:r571DgY3',
  USERSBOX: process.env.USERSBOX_TOKEN || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkX2F0IjoxNzUyNTg0NTk5LCJhcHBfaWQiOjE3NTI1ODQ1OTl9.FqMGisO5V1xW2Xr8Ri5mQryy5I1sdBBWzuckCEPpK58',
  VEKTOR: process.env.VEKTOR_TOKEN || 'C45vAVuDkzNax2BF4sz8o4KEAZFBIIK'
};

const ITP_BASE = process.env.ITP_BASE || 'https://datatech.work';
const DYXLESS_BASE = process.env.DYXLESS_BASE || 'https://api-dyxless.cfd';
const LEAKOSINT_BASE = 'https://leakosintapi.com/';
const USERSBOX_BASE = 'https://api.usersbox.ru/v1';
const VEKTOR_BASE = 'https://infosearch54321.xyz';

// DeepSeek V3 client (OpenAI-compatible API)
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
let openai = null;

// Initialize DeepSeek V3 client (uses OpenAI-compatible API)
console.log('Checking DeepSeek API key...');
console.log('DEEPSEEK_API_KEY exists:', !!DEEPSEEK_API_KEY);
console.log('DEEPSEEK_API_KEY length:', DEEPSEEK_API_KEY ? DEEPSEEK_API_KEY.length : 0);

if (DEEPSEEK_API_KEY && DEEPSEEK_API_KEY.trim() !== '') {
  try {
    openai = new OpenAI({ 
      apiKey: DEEPSEEK_API_KEY,
      baseURL: 'https://api.deepseek.com', // DeepSeek V3 API endpoint
      timeout: 120000, // 120 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è DeepSeek V3
      maxRetries: 3
    });
    console.log('‚úÖ DeepSeek V3 client initialized successfully');
    console.log('üîç DeepSeek SDK version check...');
    console.log('üì¶ Available DeepSeek methods:', Object.getOwnPropertyNames(openai.chat.completions).slice(0, 5));
  } catch (error) {
    console.error('‚ùå Failed to initialize DeepSeek V3 client:', error.message);
    openai = null;
  }
} else {
  console.warn('‚ö†Ô∏è DeepSeek API key not found in environment variables');
  console.log('Available env vars:', Object.keys(process.env).filter(key => key.includes('DEEPSEEK')));
}

// Company check providers
const DATANEWTON_BASE = process.env.DATANEWTON_BASE || 'https://api.datanewton.ru/v1';
const DATANEWTON_KEY = process.env.DATANEWTON_KEY || 'UeHgYI7e4ejX';
const CHECKO_BASE = process.env.CHECKO_BASE || 'https://api.checko.ru/v2';
const CHECKO_KEY = process.env.CHECKO_KEY || process.env.CHECKO_API_KEY || 'iWq90n732rGN2rex';

function extractUsernameIfSocial(field, query) {
  if (!query || (field !== 'vk' && field !== 'ok')) return query;
  try {
    // If it's a URL, parse and extract last meaningful segment
    if (/^https?:\/\//i.test(query)) {
      const u = new URL(query);
      const host = u.hostname.replace(/^www\./, '');
      if (host.includes('vk.com')) {
        // vk.com/id123 | vk.com/username | vk.com/club123 | vk.com/public123
        const seg = u.pathname.split('/').filter(Boolean);
        if (seg.length > 0) return seg[seg.length - 1];
      }
      if (host.includes('ok.ru') || host.includes('odnoklassniki.ru')) {
        // ok.ru/profile/123 | ok.ru/username
        const seg = u.pathname.split('/').filter(Boolean);
        if (seg.length > 0) return seg[seg.length - 1];
      }
    }
    // Otherwise return as-is (might be id12345 or username)
    return query.replace(/^@+/, '');
  } catch {
    return query;
  }
}

// Import normalizers
const ITPNormalizer = require('./utils/ITPNormalizer');
const DyxlessNormalizer = require('./utils/DyxlessNormalizer');
const LeakOsintNormalizer = require('./utils/LeakOsintNormalizer');
const UsersboxNormalizer = require('./utils/UsersboxNormalizer');

async function searchITP(query, field) {
  try {
    const itpTypeMap = {
      phone: 'phone',
      email: 'email',
      inn: 'inn',
      snils: 'snils',
      vk: 'username',
      ok: 'username'
    };
    const isSocial = field === 'vk' || field === 'ok';
    const adjustedQuery = isSocial ? extractUsernameIfSocial(field, query) : query;
    const itpType = itpTypeMap[field] || 'full_text';
    const res = await axios.post(
      ITP_BASE + '/public-api/data/search',
      {
        searchOptions: [
          { type: itpType, query: adjustedQuery }
        ]
      },
      { headers: { 'x-api-key': TOKENS.ITP } }
    );
    const data = res.data || {};
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ ITP –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîç ITP response structure:`, {
      statusCode: res.status,
      hasData: !!data.data,
      dataType: typeof data.data,
      dataKeys: data.data ? Object.keys(data.data) : 'no data',
      dataLength: Array.isArray(data.data) ? data.data.length : 'not array',
      fullResponseKeys: Object.keys(data)
    });
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ ITP
    const normalizedItems = data.data ? ITPNormalizer.normalizeRecords(data.data) : [];
    
    console.log(`üìä ITP normalized ${normalizedItems.length} records from ${data.data?.length || 0} original records`);
    
    return { 
      name: 'ITP', 
      ok: true, 
      meta: { 
        records: data.records, 
        searchId: data.searchId,
        originalCount: data.data?.length || 0,
        normalizedCount: normalizedItems.length
      }, 
      items: normalizedItems,
      _originalItems: data.data // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };
  } catch (err) {
    return { name: 'ITP', ok: false, error: normalizeError(err) };
  }
}

async function searchDyxless(query, type = 'standart') {
  const attempt = async () => {
    const res = await axios.post(
      DYXLESS_BASE + '/query',
      { 
        token: TOKENS.DYXLESS,
        query: query,
        type: type // 'standart' (2‚ÇΩ) or 'telegram' (10‚ÇΩ)
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) DataTrace/1.0'
        },
        timeout: 15000
      }
    );
    // If Cloudflare returns an HTML error page, treat as outage
    const ct = res.headers && res.headers['content-type'];
    if (ct && ct.includes('text/html') && typeof res.data === 'string') {
      throw { response: { status: res.status || 521, data: 'Cloudflare HTML error page' } };
    }
    
    const data = res.data || {};
    
    // Handle error responses based on new API format
    if (!data.status) {
      const errorMessage = data.message || 'Unknown error from Dyxless API';
      throw new Error(`Dyxless API Error: ${errorMessage}`);
    }
    
    const items = data.data || [];
    const count = data.counts || items.length || 0;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç Dyxless –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const normalizedResponse = {
      name: 'Dyxless', 
      ok: data.status === true, 
      meta: { count: count }, 
      items: items
    };
    
    return DyxlessNormalizer.normalizeResponse(normalizedResponse);
  };

  try {
    return await attempt();
  } catch (e1) {
    // Handle specific error cases from new API
    if (e1.response?.status === 401) {
      return { name: 'Dyxless', ok: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Dyxless API' };
    }
    if (e1.response?.status === 403) {
      const errorData = e1.response?.data || {};
      return { name: 'Dyxless', ok: false, error: errorData.message || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' };
    }
    if (e1.response?.status === 404) {
      return { name: 'Dyxless', ok: true, meta: { count: 0 }, items: [] };
    }
    
    // Retry once after 600ms for other errors
    await new Promise((r) => setTimeout(r, 600));
    try {
      return await attempt();
    } catch (e2) {
      return { name: 'Dyxless', ok: false, error: normalizeError(e2) };
    }
  }
}

async function searchLeakOsint(query) {
  try {
    const res = await axios.post(
      LEAKOSINT_BASE,
      { token: TOKENS.LEAKOSINT, request: query, limit: 100, lang: 'ru', type: 'json' },
      { headers: { 'Content-Type': 'application/json' } }
    );
    const data = res.data || {};
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ LeakOsint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîç LeakOsint response structure:`, {
      statusCode: res.status,
      hasData: !!data.List,
      dataType: typeof data.List,
      listKeys: data.List ? Object.keys(data.List).slice(0, 3) : 'no List',
      fullResponseKeys: Object.keys(data)
    });
    
    console.log('üîç LeakOsint full response data:', JSON.stringify(data, null, 2));
    
    // Error path
    if (data && (data['Error code'] || data.Error || data.error)) {
      return { name: 'LeakOsint', ok: false, error: data };
    }
    
    // Check for "No results found" message - this means no leaks were found
    const responseText = JSON.stringify(data).toLowerCase();
    console.log('üîç LeakOsint response text (for checking):', responseText.substring(0, 200));
    
    if (responseText.includes('no results found') || 
        responseText.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤') ||
        responseText.includes('–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')) {
      console.log(`‚úÖ LeakOsint: Detected "No results found" in response`);
      return { name: 'LeakOsint', ok: true, items: [] };
    }
    
    // Normal path
    const list = data.List || {};
    const items = Object.keys(list).map((k) => ({ db: k, info: list[k]?.InfoLeak, data: list[k]?.Data }));
    if (!Object.keys(list).length) {
      console.log(`‚úÖ LeakOsint: No List property or empty List`);
      return { name: 'LeakOsint', ok: true, items: [] };
    }
    
    // More detailed filtering - check inside InfoLeak and Data fields
    const validItems = items.filter(item => {
      const itemText = JSON.stringify(item).toLowerCase();
      const hasNoResults = itemText.includes('no results found') || 
                          itemText.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤') ||
                          itemText.includes('–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤') ||
                          itemText.includes('–ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      
      if (hasNoResults) {
        console.log(`üö´ LeakOsint: Filtering out item with "No results": ${item.db}`);
        return false;
      }
      
      // Also check if Data field is empty or contains only info messages
      if (item.data && Array.isArray(item.data) && item.data.length === 0) {
        console.log(`üö´ LeakOsint: Filtering out item with empty data array: ${item.db}`);
        return false;
      }
      
      return true;
    });
    
    if (validItems.length === 0) {
      console.log(`‚úÖ LeakOsint: All items filtered out as empty/no results`);
      return { name: 'LeakOsint', ok: true, items: [] };
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ LeakOsint
    const normalizedItems = LeakOsintNormalizer.normalizeRecords(validItems);
    
    console.log(`üìä LeakOsint normalized ${normalizedItems.length} records from ${validItems.length} valid items (filtered from ${items.length} total)`);
    
    return { name: 'LeakOsint', ok: true, items: normalizedItems };
  } catch (err) {
    return { name: 'LeakOsint', ok: false, error: normalizeError(err) };
  }
}

async function searchUsersbox(query) {
  try {
    const res = await axios.get(
      USERSBOX_BASE + '/search',
      {
        params: { q: query },
        headers: { Authorization: TOKENS.USERSBOX }
      }
    );
    const data = res.data || {};
    console.log('üìä Usersbox raw response:', JSON.stringify(data, null, 2));
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const normalizedData = UsersboxNormalizer.normalizeUsersboxData(data);
    console.log('üìã Usersbox normalized data:', JSON.stringify(normalizedData, null, 2));
    
    return { 
      name: 'Usersbox', 
      ok: data.status === 'success', 
      items: normalizedData, 
      meta: { count: data.data?.count } 
    };
  } catch (err) {
    console.error('‚ùå Usersbox search error:', err.message);
    return { name: 'Usersbox', ok: false, error: normalizeError(err) };
  }
}

async function searchVektor(query) {
  try {
    const url = `${VEKTOR_BASE}/api/${encodeURIComponent(TOKENS.VEKTOR)}/search/${encodeURIComponent(query)}`;
    const res = await axios.get(url);
    const data = res.data || {};
    if (data && data.error) {
      return { name: 'Vektor', ok: false, error: data.error };
    }
    if (!data || !data.result) {
      return { name: 'Vektor', ok: false, error: { message: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è result', preview: data } };
    }
    return { name: 'Vektor', ok: true, items: data.result };
  } catch (err) {
    return { name: 'Vektor', ok: false, error: normalizeError(err) };
  }
}

function normalizeError(err) {
  if (err.response) {
    const status = err.response.status;
    const statusText = err.response.statusText;
    const data = err.response.data;
    const isString = typeof data === 'string';
    return {
      status,
      statusText,
      preview: isString ? String(data).slice(0, 600) : undefined,
      data: !isString ? data : undefined,
    };
  }
  if (err.request) {
    return { message: 'No response from server', code: err.code };
  }
  return { message: err.message, code: err.code };
}

// Sequential search
app.post('/api/search', optionalAuth, userRateLimit(30, 15 * 60 * 1000), async (req, res) => {
  try {
    const { query, field } = req.body || {};
    if (!query || typeof query !== 'string' || query.trim().length < 3) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞)' });
    }
    const allowedFields = new Set(['phone', 'email', 'vk', 'ok', 'inn', 'snils']);
    const f = allowedFields.has(field) ? field : 'full_text';

    const steps = [];
    // For social types, extract simplified username once
    const finalQuery = extractUsernameIfSocial(f, query);
    for (const [idx, fn] of [searchITP, searchDyxless, searchLeakOsint, searchUsersbox, searchVektor].entries()) {
      // eslint-disable-next-line no-await-in-loop
      const result = idx === 0 ? await fn(finalQuery, f) : await fn(finalQuery);
      steps.push(result);
    }

    res.json({ query: finalQuery, field: f, results: steps });
  } catch (e) {
    res.status(500).json({ error: normalizeError(e) });
  }
});

// Company search endpoints
async function searchDatanewton(inn) {
  try {
    const res = await axios.get(`${DATANEWTON_BASE}/counterparty`, {
      params: {
        key: DATANEWTON_KEY,
        inn,
        // include useful blocks by default
        filters: 'ADDRESS_BLOCK,OWNER_BLOCK,MANAGER_BLOCK,OKVED_BLOCK,CONTACT_BLOCK,NEGATIVE_LISTS_BLOCK'
      },
      timeout: 15000
    });
    // Avoid flooding logs with full payloads in production
    const dnKeys = res.data ? Object.keys(res.data) : [];
    console.log('Datanewton response ok. Top-level keys:', dnKeys.slice(0, 10));
    return { name: 'Datanewton', ok: true, items: res.data };
  } catch (err) {
    console.error('Datanewton error:', err.response?.data || err.message);
    return { name: 'Datanewton', ok: false, error: normalizeError(err) };
  }
}

async function searchChecko(inn) {
  if (!CHECKO_KEY || CHECKO_KEY.trim() === '') {
    return { name: 'Checko', ok: false, error: { message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CHECKO_KEY –≤ .env —Ñ–∞–π–ª–µ' } };
  }
  try {
    const res = await axios.get(`${CHECKO_BASE}/company`, {
      params: { key: CHECKO_KEY, inn },
      timeout: 15000
    });
    // Avoid printing full Checko payload
    const ckKeys = res.data ? Object.keys(res.data) : [];
    console.log('Checko response ok. Top-level keys:', ckKeys.slice(0, 10));
    return { name: 'Checko', ok: true, items: res.data };
  } catch (err) {
    console.error('Checko error:', err.response?.data || err.message);
    return { name: 'Checko', ok: false, error: normalizeError(err) };
  }
}

async function getCheckoFinances(inn, ogrn, kpp, extended = false) {
  if (!CHECKO_KEY || CHECKO_KEY.trim() === '') {
    return { name: 'Checko Finances', ok: false, error: { message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CHECKO_KEY –≤ .env —Ñ–∞–π–ª–µ' } };
  }
  try {
    const params = { key: CHECKO_KEY };
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–ì–†–ù, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (ogrn) {
      params.ogrn = ogrn;
    } else if (inn) {
      params.inn = inn;
      // –î–æ–±–∞–≤–ª—è–µ–º –ö–ü–ü –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (kpp) {
        params.kpp = kpp;
      }
    } else {
      return { name: 'Checko Finances', ok: false, error: { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ò–ù–ù –∏–ª–∏ –û–ì–†–ù' } };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
    if (extended) {
      params.extended = 'true';
    }

    const res = await axios.get(`${CHECKO_BASE}/finances`, {
      params,
      timeout: 20000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    });
    
    console.log('Checko Finances response ok. Data available:', !!res.data);
    return { name: 'Checko Finances', ok: true, items: res.data };
  } catch (err) {
    console.error('Checko Finances error:', err.response?.data || err.message);
    return { name: 'Checko Finances', ok: false, error: normalizeError(err) };
  }
}

async function getDatanewtonFinances(inn, ogrn) {
  if (!DATANEWTON_KEY || DATANEWTON_KEY.trim() === '') {
    return { name: 'Datanewton Finances', ok: false, error: { message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DATANEWTON_KEY –≤ .env —Ñ–∞–π–ª–µ' } };
  }
  try {
    const params = { key: DATANEWTON_KEY };
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–ì–†–ù, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (ogrn) {
      params.ogrn = ogrn;
    } else if (inn) {
      params.inn = inn;
    } else {
      return { name: 'Datanewton Finances', ok: false, error: { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ò–ù–ù –∏–ª–∏ –û–ì–†–ù' } };
    }

    const res = await axios.get(`${DATANEWTON_BASE}/finance`, {
      params,
      timeout: 20000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    });
    
    console.log('Datanewton Finances response ok. Data available:', !!res.data);
    return { name: 'Datanewton Finances', ok: true, items: res.data };
  } catch (err) {
    console.error('Datanewton Finances error:', err.response?.data || err.message);
    return { name: 'Datanewton Finances', ok: false, error: normalizeError(err) };
  }
}

app.post('/api/company-search', optionalAuth, userRateLimit(20, 15 * 60 * 1000), async (req, res) => {
  try {
    const { inn } = req.body || {};
    if (!inn || !/^\d{10,12}$/.test(String(inn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)' });
    }
    const steps = [];
    steps.push(await searchDatanewton(inn));
    steps.push(await searchChecko(inn));
    res.json({ query: String(inn).trim(), field: 'inn', results: steps });
  } catch (e) {
    res.status(500).json({ error: normalizeError(e) });
  }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
app.post('/api/company-search-step', optionalAuth, userRateLimit(40, 15 * 60 * 1000), async (req, res) => {
  try {
    const { inn, step } = req.body || {};
    if (!inn || !/^\d{10,12}$/.test(String(inn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)' });
    }

    let result;
    switch (step) {
      case 1:
        console.log('üîç Step 1: Searching Datanewton...');
        result = await searchDatanewton(inn);
        break;
      case 2:
        console.log('üîç Step 2: Searching Checko...');
        result = await searchChecko(inn);
        break;
      default:
        return res.status(400).json({ error: 'Invalid step' });
    }

    res.json({
      query: String(inn).trim(),
      field: 'inn',
      step,
      result,
      timestamp: new Date().toISOString()
    });
  } catch (e) {
    res.status(500).json({ error: normalizeError(e) });
  }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫
app.post('/api/leak-search-step', optionalAuth, userRateLimit(50, 15 * 60 * 1000), async (req, res) => {
  try {
    const { query, field, step } = req.body || {};
    if (!query || typeof query !== 'string' || query.trim().length < 3) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞)' });
    }

    const allowedFields = new Set(['phone', 'email', 'vk', 'ok', 'inn', 'snils']);
    const f = allowedFields.has(field) ? field : 'full_text';
    const finalQuery = extractUsernameIfSocial(f, query);

    let result;
    switch (step) {
      case 1:
        console.log('üîç Step 1: Searching ITP...');
        result = await searchITP(finalQuery, f);
        break;
      case 2:
        console.log('üîç Step 2: Searching Dyxless...');
        result = await searchDyxless(finalQuery);
        break;
      case 3:
        console.log('üîç Step 3: Searching LeakOsint...');
        result = await searchLeakOsint(finalQuery);
        break;
      case 4:
        console.log('üîç Step 4: Searching Usersbox...');
        result = await searchUsersbox(finalQuery);
        break;
      case 5:
        console.log('üîç Step 5: Searching Vektor...');
        result = await searchVektor(finalQuery);
        break;
      default:
        return res.status(400).json({ error: 'Invalid step' });
    }

    res.json({
      query: finalQuery,
      field: f,
      step,
      result,
      timestamp: new Date().toISOString()
    });
  } catch (e) {
    res.status(500).json({ error: normalizeError(e) });
  }
});


// Initialize AI services - Only DeepSeek V3
const DeepSeekService = require('./services/DeepSeekService');

const deepseekService = new DeepSeekService(
  process.env.DEEPSEEK_API_KEY,
  process.env.DEEPSEEK_BASE_URL || 'https://api.deepseek.com'
);

// Use DeepSeek V3 for all AI operations (more reliable than GPT-5)
const companyAIService = deepseekService.isAvailable() ? deepseekService : null;
const leaksAIService = deepseekService.isAvailable() ? deepseekService : null;

console.log(`ü§ñ Company AI service: ${companyAIService ? 'DeepSeek V3' : 'None (unavailable)'}`);
console.log(`üîç Leaks AI service: ${leaksAIService ? 'DeepSeek V3' : 'None (unavailable)'}`);
console.log(`üéØ Using DeepSeek V3 for all AI operations (671B parameter model)`);
const dehashedService = new DeHashedService(
  process.env.DEHASHED_API_KEY,
  process.env.DEHASHED_BASE_URL || 'https://api.dehashed.com'
);

// Company finances endpoint - —Ç–æ–ª—å–∫–æ –¥–ª—è Checko API
app.post('/api/company-finances', optionalAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    const { inn, ogrn, kpp, extended } = req.body || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –ò–ù–ù –∏–ª–∏ –û–ì–†–ù
    if (!inn && !ogrn) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ò–ù–ù –∏–ª–∏ –û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (inn && !/^\d{10,12}$/.test(String(inn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –û–ì–†–ù –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (ogrn && !/^\d{13,15}$/.test(String(ogrn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –û–ì–†–ù (13-15 —Ü–∏—Ñ—Ä)' });
    }
    
    console.log('üè¶ Requesting financial data for:', { inn, ogrn, kpp, extended });
    
    const result = await getCheckoFinances(inn, ogrn, kpp, !!extended);
    
    res.json({
      query: { inn, ogrn, kpp, extended: !!extended },
      result,
      timestamp: new Date().toISOString()
    });
  } catch (e) {
    console.error('Company finances error:', e);
    res.status(500).json({ error: normalizeError(e) });
  }
});

// Datanewton finances endpoint
app.post('/api/datanewton-finances', optionalAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    const { inn, ogrn } = req.body || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –ò–ù–ù –∏–ª–∏ –û–ì–†–ù
    if (!inn && !ogrn) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ò–ù–ù –∏–ª–∏ –û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (inn && !/^\d{10,12}$/.test(String(inn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –û–ì–†–ù –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (ogrn && !/^\d{13,15}$/.test(String(ogrn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –û–ì–†–ù (13-15 —Ü–∏—Ñ—Ä)' });
    }
    
    console.log('üìä Requesting Datanewton financial data for:', { inn, ogrn });
    
    const result = await getDatanewtonFinances(inn, ogrn);
    
    res.json({
      query: { inn, ogrn },
      result,
      timestamp: new Date().toISOString()
    });
  } catch (e) {
    console.error('Datanewton finances error:', e);
    res.status(500).json({ error: normalizeError(e) });
  }
});

// Authentication endpoints
app.post('/api/auth/signup', async (req, res) => {
  try {
    const { email, password, name, phone, ...additionalData } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!email || !password || !name || !phone) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Email, password, name, and phone are required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Invalid email format' },
        req
      );
      return res.status(statusCode).json(response);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Password must be at least 6 characters long' },
        req
      );
      return res.status(statusCode).json(response);
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      name: name.trim(),
      phone: phone.trim(),
      ...additionalData
    };

    const result = await authService.signUp(email.trim().toLowerCase(), password, userData);

    if (result.ok) {
      // –£–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const sanitizedResult = {
        ...result,
        user: result.user ? {
          id: result.user.id,
          email: result.user.email,
          user_metadata: result.user.user_metadata,
          created_at: result.user.created_at
        } : null
      };
      res.json(sanitizedResult);
    } else {
      const statusCode = result.error.code === 'AUTH_ERROR' ? 400 : 500;
      res.status(statusCode).json(result);
    }
  } catch (error) {
    console.error('Signup endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/auth/signin', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Email and password are required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    const result = await authService.signIn(email, password);

    if (result.ok) {
      res.json(result);
    } else {
      const statusCode = result.error.code === 'AUTH_ERROR' ? 401 : 500;
      res.status(statusCode).json(result);
    }
  } catch (error) {
    console.error('Signin endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/auth/signout', requireAuth, async (req, res) => {
  try {
    const result = await authService.signOut();
    res.json(result);
  } catch (error) {
    console.error('Signout endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.get('/api/auth/user', requireAuth, async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    const profileResult = await authService.getUserProfile(req.user.id);
    
    const response = {
      ok: true,
      user: {
        ...req.user,
        profile: profileResult.ok ? profileResult.profile : null
      }
    };
    
    res.json(response);
  } catch (error) {
    console.error('Get user endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/profile', requireAuth, async (req, res) => {
  try {
    const profileResult = await authService.getUserProfile(req.user.id);
    
    if (profileResult.ok) {
      res.json(profileResult);
    } else {
      res.status(404).json({
        ok: false,
        error: { message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
      });
    }
  } catch (error) {
    console.error('Get profile endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/auth/refresh', async (req, res) => {
  try {
    const { refresh_token } = req.body;

    if (!refresh_token) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Refresh token is required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    const result = await authService.refreshSession(refresh_token);

    if (result.ok) {
      res.json(result);
    } else {
      const statusCode = 401;
      res.status(statusCode).json(result);
    }
  } catch (error) {
    console.error('Refresh endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/auth/reset-password', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Email is required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    const result = await authService.resetPassword(email);
    res.json(result);
  } catch (error) {
    console.error('Reset password endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/auth/update-password', requireAuth, async (req, res) => {
  try {
    const { password } = req.body;

    if (!password) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'New password is required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    const result = await authService.updatePassword(req.token, password);
    res.json(result);
  } catch (error) {
    console.error('Update password endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

// Password checking endpoints
app.post('/api/password-check', optionalAuth, userRateLimit(20, 15 * 60 * 1000), async (req, res) => {
  try {
    const { password } = req.body;

    if (!password || typeof password !== 'string') {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Password is required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    if (password.length < 1 || password.length > 200) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Password length must be between 1 and 200 characters' },
        req
      );
      return res.status(statusCode).json(response);
    }

    if (!dehashedService.isAvailable()) {
      return res.json({
        ok: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: '–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }
      });
    }

    console.log('üîê Password check request received');

    const result = await dehashedService.checkPassword(password);

    // Log for monitoring (without exposing the actual password)
    console.log(`üîç Password check completed: compromised=${result.isCompromised}, breaches=${result.breachCount}`);

    res.json(result);
  } catch (error) {
    console.error('Password check endpoint error:', error);

    // Don't expose detailed error information for security
    const sanitizedError = {
      name: 'ServiceError',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    };

    const { statusCode, response } = ErrorHandler.formatErrorResponse(sanitizedError, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/dehashed-search', optionalAuth, requireAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    const { query, field = 'email' } = req.body;

    if (!query || typeof query !== 'string') {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: 'Search query is required' },
        req
      );
      return res.status(statusCode).json(response);
    }

    if (!dehashedService.isAvailable()) {
      return res.json({
        ok: false,
        error: {
          code: 'SERVICE_UNAVAILABLE',
          message: '–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }
      });
    }

    const allowedFields = ['email', 'username', 'name', 'phone'];
    if (!allowedFields.includes(field)) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        { name: 'ValidationError', message: `Field must be one of: ${allowedFields.join(', ')}` },
        req
      );
      return res.status(statusCode).json(response);
    }

    console.log(`üîç DeHashed search request: field=${field}`);

    const result = await dehashedService.searchByField(query, field);

    console.log(`‚úÖ DeHashed search completed: found=${result.found}, total=${result.total}`);

    res.json(result);
  } catch (error) {
    console.error('DeHashed search endpoint error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

app.post('/api/company-summarize', optionalAuth, userRateLimit(50, 15 * 60 * 1000), async (req, res) => {
  try {
    console.log('Company summarize request received');
    const { inn, results } = req.body || {};
    console.log('Request data:', { inn, resultsLength: results?.length });

    if (!inn || !Array.isArray(results)) {
      console.log('Missing inn or results');
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        new Error('Missing inn or results'), req
      );
      return res.status(statusCode).json(response);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
    console.log('üîç Checking company AI service availability...');

    if (!companyAIService.isAvailable()) {
      console.log('‚ùå Company AI service not available, using fallback');
      const fallbackResponse = ErrorHandler.createFallbackResponse(
        { query: inn, results }, 'company', 'ai-unavailable'
      );
      return res.json(fallbackResponse);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestTimeout = setTimeout(() => {
      console.log('‚è∞ Request timeout reached, sending fallback');
      if (!res.headersSent) {
        const fallbackResponse = ErrorHandler.createFallbackResponse(
          { query: inn, results }, 'company', 'timeout'
        );
        res.json(fallbackResponse);
      }
    }, 40000); // 40 —Å–µ–∫—É–Ω–¥ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è DeepSeek V3

    console.log('Starting AI request...');

    try {
      console.log('üöÄ Normalizing company data...');
      const normalizedData = optimizeCompanyDataForAI(results);

      console.log('üöÄ Using AI service for company analysis...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      const response = await companyAIService.generateSummary(
        { query: inn, summary: normalizedData }, 'company'
      );

      clearTimeout(requestTimeout);
      console.log('‚úÖ Company data normalized successfully:', {
        ok: response.ok,
        provider: response.provider,
        model: response.model
      });

      if (!res.headersSent) {
        res.json(response);
      }
    } catch (aiError) {
      console.log('‚ùå AI service failed, using fallback:', aiError.message);
      console.log('Error details:', aiError);
      clearTimeout(requestTimeout);

      if (!res.headersSent) {
        const fallbackResponse = companyAIService.createFallbackResponse(
          { query: inn, results }, 'company'
        );
        res.json(fallbackResponse);
      }
    }
  } catch (e) {
    console.error('Company summarize error:', e.message, e.stack);
    ErrorHandler.logError(e, { endpoint: '/api/company-summarize', inn, resultsCount: results?.length });

    if (!res.headersSent) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(e, req);
      res.status(statusCode).json(response);
    }
  }
});

// Leak summarization endpoint
app.post('/api/summarize', optionalAuth, userRateLimit(30, 15 * 60 * 1000), async (req, res) => {
  try {
    console.log('Leak summarize request received');
    const { query, field, results } = req.body || {};
    console.log('Request data:', { query, field, resultsLength: results?.length });

    if (!query || !Array.isArray(results)) {
      console.log('Missing query or results');
      const { statusCode, response } = ErrorHandler.formatErrorResponse(
        new Error('Missing query or results'), req
      );
      return res.status(statusCode).json(response);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É—Ç–µ—á–µ–∫
    console.log('üîç Checking leaks AI service availability...');

    if (!leaksAIService.isAvailable()) {
      console.log('‚ùå Leaks AI service not available, using fallback');
      const fallbackResponse = ErrorHandler.createFallbackResponse(
        { query, field, results }, 'leaks', 'ai-unavailable'
      );
      return res.json(fallbackResponse);
    }

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ timeout'—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
    const isProduction = process.env.NODE_ENV === 'production';
    const generalTimeout = isProduction ? 180000 : 250000; // 180s –¥–ª—è production, 250s –¥–ª—è development
    
    const requestTimeout = setTimeout(() => {
      console.log('‚è∞ Request timeout reached, sending fallback');
      if (!res.headersSent) {
        const fallbackResponse = ErrorHandler.createFallbackResponse(
          { query, field, results }, 'leaks', 'timeout'
        );
        res.json(fallbackResponse);
      }
    }, generalTimeout);

      console.log(`Starting AI request with ${leaksAIService.isAvailable() ?
        'OpenAI' : 'fallback'}...`);

    try {
      const compact = compactResults(results);
      const optimizedData = optimizeDataForAI(compact);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Kimi –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫
      const response = await leaksAIService.generateSummary(
        { query, field, results: results }, 'leaks' // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ results –∫–∞–∫ –º–∞—Å—Å–∏–≤
      );

      clearTimeout(requestTimeout);
      console.log('‚úÖ AI service response received');

      if (!res.headersSent) {
        res.json(response);
      }
    } catch (aiError) {
      console.log('‚ùå AI service failed, using fallback:', aiError.message);
      clearTimeout(requestTimeout);

      if (!res.headersSent) {
        const fallbackResponse = leaksAIService.createFallbackResponse(
          { query, field, results }, 'leaks'
        );
        res.json(fallbackResponse);
      }
    }
  } catch (e) {
    console.error('Leak summarize error:', e.message, e.stack);
    ErrorHandler.logError(e, { endpoint: '/api/summarize', query, resultsCount: results?.length });

    if (!res.headersSent) {
      const { statusCode, response } = ErrorHandler.formatErrorResponse(e, req);
      res.status(statusCode).json(response);
    }
  }
});

function createLeakFallbackSummary(query, field, compact) {
  let found = false;
  let sources = {};
  let highlights = [];
  let person = {
    name: null,
    phones: [],
    emails: [],
    usernames: [],
    ids: [],
    addresses: []
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  for (const [sourceName, sourceData] of Object.entries(compact)) {
    if (sourceData.ok && sourceData.data) {
      found = true;
      let foundCount = 0;

      if (sourceName === 'ITP' && typeof sourceData.data === 'object') {
        for (const [category, items] of Object.entries(sourceData.data)) {
          if (Array.isArray(items) && items.length > 0) {
            foundCount += items.length;
            highlights.push(`${category}: ${items.length} –∑–∞–ø–∏—Å–µ–π`);
          }
        }
      } else if (Array.isArray(sourceData.data)) {
        foundCount = sourceData.data.length;
        if (foundCount > 0) {
          highlights.push(`${sourceName}: ${foundCount} –∑–∞–ø–∏—Å–µ–π`);
        }
      }

      sources[sourceName] = { foundCount, notes: foundCount > 0 ? '–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' };
    } else {
      sources[sourceName] = { foundCount: 0, notes: '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' };
    }
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if (!found) {
    highlights.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  return {
    found,
    sources,
    highlights,
    person
  };
}

function compactResults(results) {
  const out = {};
  for (const r of results || []) {
    if (!r || !r.name) continue;
    if (r.name === 'ITP') {
      const groups = r.items || {};
      const obj = {};
      const names = Object.keys(groups).slice(0, 3);
      for (const key of names) {
        const arr = Array.isArray(groups[key]?.data) ? groups[key].data.slice(0, 3) : [];
        obj[key] = arr;
      }
      out.ITP = { ok: r.ok, meta: r.meta, data: obj };
    } else if (r.name === 'Dyxless') {
      const arr = Array.isArray(r.items) ? r.items.slice(0, 8) : [];
      out.Dyxless = { ok: r.ok, meta: r.meta, data: arr };
    } else if (r.name === 'LeakOsint') {
      const arr = Array.isArray(r.items) ? r.items.slice(0, 3).map(g => ({ db: g.db, info: g.info, data: Array.isArray(g.data) ? g.data.slice(0, 3) : [] })) : [];
      out.LeakOsint = { ok: r.ok, data: arr };
    } else if (r.name === 'Usersbox') {
      const arr = Array.isArray(r.items) ? r.items.slice(0, 10) : [];
      out.Usersbox = { ok: r.ok, meta: r.meta, data: arr };
    } else if (r.name === 'Vektor') {
      out.Vektor = { ok: r.ok, data: r.items };
    }
  }
  return out;
}

function optimizeDataForAI(compact) {
  const optimized = {};

  for (const [sourceName, sourceData] of Object.entries(compact)) {
    if (!sourceData.ok || !sourceData.data) {
      optimized[sourceName] = { ok: false, count: 0 };
      continue;
    }

    const summary = { ok: true, count: 0, samples: [], databases: [] };

    if (sourceName === 'ITP') {
      for (const [groupName, records] of Object.entries(sourceData.data)) {
        if (Array.isArray(records)) {
          summary.count += records.length;
          summary.samples.push(...records.slice(0, 2)); // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
          summary.databases.push(groupName);
        }
      }
    } else if (sourceName === 'Dyxless') {
      if (Array.isArray(sourceData.data)) {
        summary.count = sourceData.data.length;
        summary.samples = sourceData.data.slice(0, 3); // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const dbs = [...new Set(sourceData.data.map(r => r.database).filter(Boolean))];
        summary.databases = dbs.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –±–∞–∑
      }
    } else if (sourceName === 'LeakOsint') {
      if (Array.isArray(sourceData.data)) {
        summary.databases = sourceData.data.map(leak => leak.db).filter(Boolean);
        summary.count = sourceData.data.reduce((sum, leak) => sum + (leak.data?.length || 0), 0);
        // –ë–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–∂–¥–æ–π –±–∞–∑—ã
        sourceData.data.forEach(leak => {
          if (leak.data && leak.data.length > 0) {
            summary.samples.push(leak.data[0]);
          }
        });
      }
    } else if (sourceName === 'Usersbox') {
      if (Array.isArray(sourceData.data)) {
        summary.count = sourceData.data.length;
        summary.samples = sourceData.data.slice(0, 3);
      }
    } else if (sourceName === 'Vektor') {
      if (Array.isArray(sourceData.data)) {
        summary.count = sourceData.data.length;
        summary.samples = sourceData.data.slice(0, 3);
      } else if (sourceData.data) {
        summary.count = 1;
        summary.samples = [sourceData.data];
      }
    }

    optimized[sourceName] = summary;
  }

  return optimized;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI (–¥–æ GPT)
function optimizeCompanyDataForAI(results) {
  const summary = {
    company: {
      name: null,
      fullName: null,
      shortName: null,
      inn: null,
      ogrn: null,
      kpp: null,
      opf: null,
      registration_date: null,
      years_from_registration: null,
      status: null,
      address: null,
      activity: null,
      charter_capital: null,
      contacts: { phones: [], emails: [], sites: [] }
    },
    ceo: { name: null, fio: null, position: null, post: null },
    managers: [],
    owners: [],
    okved: { main: {}, additional: [] },
    risk_flags: [],
    notes: []
  };

  try {
    for (const r of results || []) {
      if (!r || !r.ok || !r.items) continue;
      const it = r.items;

      // –ù–∞–∑–≤–∞–Ω–∏–µ / –ò–ù–ù / –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö)
      summary.company.shortName = summary.company.shortName || it?.company_names?.short_name || it?.short_name || it?.shortName || null;
      summary.company.fullName = summary.company.fullName || it?.company_names?.full_name || it?.full_name || it?.fullName || null;
      summary.company.name = summary.company.name || it?.name || summary.company.shortName || summary.company.fullName || null;
      summary.company.inn = summary.company.inn || it?.inn || it?.–ò–ù–ù || null;
      summary.company.ogrn = summary.company.ogrn || it?.ogrn || it?.–û–ì–†–ù || null;
      summary.company.kpp = summary.company.kpp || it?.kpp || it?.–ö–ü–ü || null;
      summary.company.opf = summary.company.opf || it?.opf || it?.OPF || it?.["–û–ü–§"] || null;
      summary.company.status = summary.company.status || it?.status || it?.state || null;

      // –ê–¥—Ä–µ—Å
      summary.company.address = summary.company.address || it?.address?.line_address || it?.address || null;

      // –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      summary.company.activity = summary.company.activity || it?.okved_main?.value || it?.activity || null;

      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      if (Array.isArray(it?.phones)) summary.company.contacts.phones = it.phones;
      if (Array.isArray(it?.emails)) summary.company.contacts.emails = it.emails;
      if (Array.isArray(it?.sites)) summary.company.contacts.sites = it.sites;

      // –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
      if (it?.ceo?.name || it?.manager?.name) {
        summary.ceo.name = summary.ceo.name || it?.ceo?.name || it?.manager?.name || null;
        summary.ceo.fio = summary.ceo.fio || it?.ceo?.fio || it?.manager?.fio || null;
        summary.ceo.position = summary.ceo.position || it?.ceo?.position || it?.manager?.position || null;
        summary.ceo.post = summary.ceo.post || it?.ceo?.post || it?.manager?.post || null;
      }

      // –û–ö–í–≠–î
      if (it?.okved_main) {
        summary.okved.main = summary.okved.main || {
          code: it?.okved_main?.code,
          text: it?.okved_main?.value || it?.okved_main?.text,
          title: it?.okved_main?.title
        };
      }
      if (Array.isArray(it?.okveds)) {
        summary.okved.additional = it.okveds.slice(0, 10).map(x => ({ code: x.code, text: x.value || x.text, title: x.title }));
      }

      // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ / —Ä–∏—Å–∫–∏
      if (Array.isArray(it?.negative_lists)) {
        for (const flag of it.negative_lists) {
          if (flag && typeof flag === 'string') summary.risk_flags.push(flag);
        }
      }
    }
  } catch (e) {
    console.warn('optimizeCompanyDataForAI error:', e.message);
  }

  return summary;
}

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
app.get('/api/company', async (req, res) => {
  try {
    const { inn } = req.query;
    if (!inn || !/^\d{10,12}$/.test(String(inn).trim())) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    const steps = [];
    steps.push(await searchDatanewton(inn));
    steps.push(await searchChecko(inn));

    res.json({
      inn: String(inn).trim(),
      results: steps,
      timestamp: new Date().toISOString()
    });
  } catch (e) {
    res.status(500).json({ error: normalizeError(e) });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/check-user-phone', requireAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    console.log('üîç User phone check request received');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profileResult = await authService.getUserProfile(req.user.id);

    if (!profileResult.ok || !profileResult.profile?.phone) {
      return res.status(400).json({
        ok: false,
        error: { message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
      });
    }

    const phone = profileResult.profile.phone;
    console.log(`üì± Checking phone: ${phone} for user: ${req.user.id}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    const steps = [];
    const finalQuery = phone.replace(/[\s\-\(\)]/g, ''); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä

    for (const [idx, fn] of [searchITP, searchDyxless, searchLeakOsint, searchUsersbox, searchVektor].entries()) {
      const result = idx === 0 ? await fn(finalQuery, 'phone') : await fn(finalQuery);
      steps.push(result);
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
    const totalLeaks = steps.reduce((sum, step) => {
      if (!step.ok || !step.items) return sum;

      if (step.name === 'ITP' && typeof step.items === 'object') {
        return sum + Object.values(step.items).reduce((itemSum, items) => {
          return itemSum + (Array.isArray(items) ? items.length : 0);
        }, 0);
      } else if (Array.isArray(step.items)) {
        return sum + step.items.length;
      }
      return sum;
    }, 0);

    const foundSources = steps.filter(step => step.ok && step.items &&
      (Array.isArray(step.items) ? step.items.length > 0 : Object.keys(step.items).length > 0)
    ).length;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_checks

    res.json({
      ok: true,
      phone: finalQuery,
      totalLeaks,
      foundSources,
      results: steps,
      message: totalLeaks > 0
        ? `–ù–∞–π–¥–µ–Ω–æ ${totalLeaks} —É—Ç–µ—á–µ–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ ${foundSources} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`
        : '–£—Ç–µ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('User phone check error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/check-user-email', requireAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    console.log('üîç User email check request received');

    const email = req.user.email;
    if (!email) {
      return res.status(400).json({
        ok: false,
        error: { message: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
      });
    }

    console.log(`üìß Checking email: ${email} for user: ${req.user.id}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    const steps = [];

    for (const [idx, fn] of [searchITP, searchDyxless, searchLeakOsint, searchUsersbox, searchVektor].entries()) {
      const result = idx === 0 ? await fn(email, 'email') : await fn(email);
      steps.push(result);
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
    const totalLeaks = steps.reduce((sum, step) => {
      if (!step.ok || !step.items) return sum;

      if (step.name === 'ITP' && typeof step.items === 'object') {
        return sum + Object.values(step.items).reduce((itemSum, items) => {
          return itemSum + (Array.isArray(items) ? items.length : 0);
        }, 0);
      } else if (Array.isArray(step.items)) {
        return sum + step.items.length;
      }
      return sum;
    }, 0);

    const foundSources = steps.filter(step => step.ok && step.items &&
      (Array.isArray(step.items) ? step.items.length > 0 : Object.keys(step.items).length > 0)
    ).length;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_checks

    res.json({
      ok: true,
      email: email,
      totalLeaks,
      foundSources,
      results: steps,
      message: totalLeaks > 0
        ? `–ù–∞–π–¥–µ–Ω–æ ${totalLeaks} —É—Ç–µ—á–µ–∫ –ø–æ email –∞–¥—Ä–µ—Å—É –≤ ${foundSources} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`
        : '–£—Ç–µ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É email –∞–¥—Ä–µ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('User email check error:', error);
    const { statusCode, response } = ErrorHandler.formatErrorResponse(error, req);
    res.status(statusCode).json(response);
  }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Ç–µ—á–µ–∫ —á–µ—Ä–µ–∑ GPT-4
app.post('/api/format-leak-profile', optionalAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    console.log('üé® Format leak profile request received');
    
    const { leakData } = req.body;
    
    if (!leakData || !Array.isArray(leakData) || leakData.length === 0) {
      return res.status(400).json({ 
        ok: false, 
        error: '–î–∞–Ω–Ω—ã–µ —É—Ç–µ—á–µ–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeepSeek V3
    if (!openai) {
      console.log('‚ùå DeepSeek V3 not available for profile formatting');
      return res.status(503).json({
        ok: false,
        error: '–ò–ò —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        fallback: true
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const rawDataText = leakData.map(source => {
      if (!source.ok || !source.items) return '';
      
      let text = `=== ${source.name} ===\n`;
      
      if (typeof source.items === 'object' && !Array.isArray(source.items)) {
        // ITP —Ñ–æ—Ä–º–∞—Ç
        Object.entries(source.items).forEach(([category, items]) => {
          if (Array.isArray(items) && items.length > 0) {
            text += `${category}:\n`;
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            items.slice(0, 3).forEach(item => {
              text += `${JSON.stringify(item, null, 2)}\n`;
            });
            if (items.length > 3) {
              text += `... –∏ –µ—â–µ ${items.length - 3} –∑–∞–ø–∏—Å–µ–π\n`;
            }
          }
        });
      } else if (Array.isArray(source.items)) {
        // –î—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–ø–∏—Å–µ–π
        source.items.slice(0, 5).forEach(item => {
          text += `${JSON.stringify(item, null, 2)}\n`;
        });
        if (source.items.length > 5) {
          text += `... –∏ –µ—â–µ ${source.items.length - 5} –∑–∞–ø–∏—Å–µ–π\n`;
        }
      }
      
      return text;
    }).filter(Boolean).join('\n\n');

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
    const maxDataLength = 8000; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    const truncatedData = rawDataText.length > maxDataLength 
      ? rawDataText.substring(0, maxDataLength) + '\n\n[–î–ê–ù–ù–´–ï –û–ë–†–ï–ó–ê–ù–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò]'
      : rawDataText;

    console.log('üìù Prepared data length:', truncatedData.length);

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ç–µ—á–∫–∞—Ö –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∑–≤–µ–∑–¥–æ—á–∫–∏ (**) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ## –∏–ª–∏ #.

–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:

1. **–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Ç–µ—á–µ–∫:**
   –ü—Ä–µ–¥—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–¥–∞—É–Ω-—Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏: "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ç–µ—á–∫–∏", "–ì–æ–¥", "–û—Ç—Ä–∞—Å–ª—å", "–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏". –£–ø–æ—Ä—è–¥–æ—á—å —Ç–∞–±–ª–∏—Ü—É –ø–æ —É—Ä–æ–≤–Ω—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É). –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (—Å–≤—è–∑–∫–∞ –§–ò–û+–∞–¥—Ä–µ—Å+—Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ –∏ —Ç.–¥.).

2. **–ö–∞—Ä—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞:**
   –°–æ–∑–¥–∞–π markdown-—Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ–ª–±—Ü—ã: "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ç–µ—á–∫–∏", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è". –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ—Ñ–æ–Ω + –§–ò–û –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞).

3. **–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π:**
   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∏—Å–∫–∞ —É–∫–∞–∂–∏:
   - –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¶–µ–ª–µ–≤–æ–π —Ñ–∏—à–∏–Ω–≥").
   - –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, üü† –í—ã—Å–æ–∫–∏–π, üü° –°—Ä–µ–¥–Ω–∏–π).
   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å *–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º* —Ç–æ–≥–æ, –∫–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏, –Ω–æ –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑.

4. **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –∑–∞—â–∏—Ç–µ (Roadmap):**
   –ü—Ä–µ–¥–ª–æ–∂–∏ —á–µ—Ç–∫–∏–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø—ã:
   - **–®–ê–ì 1: –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–ü–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞)** (—Å–∞–º—ã–µ —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π, –≤–∫–ª—é—á–µ–Ω–∏–µ 2FA).
   - **–®–ê–ì 2: –ü–†–û–ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–©–ò–¢–ê (–ù–µ–¥–µ–ª—è)** (–º–µ—Ä—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫).
   - **–®–ê–ì 3: –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø** (–ø—Ä–∏–≤—ã—á–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π).
   –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º.

5. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–π:**
   –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏. –í–∫–ª—é—á–∞–π:
   - –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
   - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã (VK, Mail.ru, Yandex, Google)
   - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã (Wildberries, OZON, Lamoda)
   - –ì–æ—Å—É—Å–ª—É–≥–∏ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
   - –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
   –§–æ—Ä–º–∞—Ç: –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.

**–¢–æ–Ω –æ—Ç—á–µ—Ç–∞:** –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω–µ—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í –∫–æ–Ω—Ü–µ –æ—Ç—á–µ—Ç–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞—É–¥–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
${truncatedData}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:`;

    try {
      console.log('ü§ñ Sending request to DeepSeek V3 for profile formatting...');
      console.log(`üîÑ Using model: deepseek-chat`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è DeepSeek V3
      const requestParams = {
        model: 'deepseek-chat', // DeepSeek V3 model
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —Å—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 6000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        temperature: 0.2 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      };

      const completion = await openai.chat.completions.create(requestParams);
      console.log(`‚úÖ Successfully used model: deepseek-chat`);

      const formattedProfile = completion.choices[0]?.message?.content;
      
      if (!formattedProfile || formattedProfile.trim() === '') {
        console.log('‚ö†Ô∏è Empty response from DeepSeek V3');
        throw new Error('Empty response from DeepSeek V3');
      }

      console.log('‚úÖ DeepSeek V3 Chat Completions response received.');
      console.log('‚úÖ AI service response received');
      console.log('‚úÖ DeepSeek V3 profile formatting completed');
      console.log('üìä Response length:', formattedProfile.length);

      res.json({
        ok: true,
        model: 'deepseek-chat',
        profile: formattedProfile,
        meta: {
          sources_processed: leakData.length,
          data_length: truncatedData.length,
          original_data_length: rawDataText.length,
          response_length: formattedProfile.length
        }
      });

    } catch (aiError) {
      console.error('‚ùå DeepSeek V3 error in profile formatting:', aiError.message);
      
      // Provide fallback response when DeepSeek V3 fails
      const fallbackProfile = `üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.`;
      
      res.status(500).json({
        ok: false,
        error: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
        details: aiError.message,
        fallback: true
      });
    }

  } catch (error) {
    console.error('‚ùå Error in format-leak-profile:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function createPracticalSecurityAnalysis(results, query, field) {
  const analysis = {
    critical_findings: [],
    affected_services: [],
    immediate_actions: [],
    risk_level: 'low'
  };

  let totalRecords = 0;
  let hasPasswords = false;
  let hasPersonalData = false;

  results.forEach(source => {
    if (!source.ok || !source.items) return;

    if (source.name === 'ITP' && typeof source.items === 'object') {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã ITP
      Object.entries(source.items).forEach(([dbName, dbData]) => {
        if (dbData.data && Array.isArray(dbData.data) && dbData.data.length > 0) {
          const records = dbData.data.length;
          totalRecords += records;
          
          const sampleRecord = dbData.data[0];
          const dataTypes = [];
          
          if (sampleRecord.phone) dataTypes.push('—Ç–µ–ª–µ—Ñ–æ–Ω');
          if (sampleRecord.email) dataTypes.push('email'); 
          if (sampleRecord.name) dataTypes.push('–∏–º—è');
          if (sampleRecord.address) dataTypes.push('–∞–¥—Ä–µ—Å');
          if (sampleRecord.password) {
            dataTypes.push('–ø–∞—Ä–æ–ª—å');
            hasPasswords = true;
          }
          
          if (dataTypes.length > 2) hasPersonalData = true;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–∞–∑—ã
          const serviceName = extractServiceName(dbName);
          const serviceUrl = getServiceUrl(serviceName);
          
          analysis.affected_services.push({
            source: 'ITP',
            database: dbName,
            service: serviceName,
            url: serviceUrl,
            records_found: records,
            data_types: dataTypes,
            risk_level: hasPasswords ? 'critical' : (hasPersonalData ? 'high' : 'medium')
          });

          analysis.critical_findings.push(
            `–ù–∞–π–¥–µ–Ω–æ ${records} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ "${dbName}" —Å –¥–∞–Ω–Ω—ã–º–∏: ${dataTypes.join(', ')}`
          );
        }
      });
    } else if (['Dyxless', 'LeakOsint', 'Usersbox', 'Vektor'].includes(source.name)) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      if (Array.isArray(source.items) && source.items.length > 0) {
        totalRecords += source.items.length;
        
        analysis.affected_services.push({
          source: source.name,
          records_found: source.items.length,
          risk_level: 'medium'
        });

        analysis.critical_findings.push(
          `–ù–∞–π–¥–µ–Ω–æ ${source.items.length} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ ${source.name}`
        );
      }
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
  if (hasPasswords) {
    analysis.risk_level = 'critical';
  } else if (hasPersonalData || totalRecords > 5) {
    analysis.risk_level = 'high';
  } else if (totalRecords > 0) {
    analysis.risk_level = 'medium';
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  analysis.immediate_actions = generateSpecificActions(analysis.affected_services, hasPasswords);

  return {
    risk_level: analysis.risk_level,
    summary: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ ${analysis.affected_services.length} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö`,
    security_recommendations: {
      password_change_sites: analysis.affected_services
        .filter(s => s.url)
        .map(s => s.url),
      immediate_actions: analysis.immediate_actions
    },
    detailed_findings: analysis.critical_findings,
    affected_services: analysis.affected_services
  };
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function extractServiceName(dbName) {
  const serviceMap = {
    '–∞–≤–∏—Ç–æ': '–ê–≤–∏—Ç–æ',
    'avito': '–ê–≤–∏—Ç–æ', 
    '2 –±–µ—Ä–µ–≥–∞': '2 –ë–µ—Ä–µ–≥–∞',
    '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
    'vk': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
    '–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
    'ok': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
    'mail': 'Mail.ru',
    '—è–Ω–¥–µ–∫—Å': '–Ø–Ω–¥–µ–∫—Å',
    'yandex': '–Ø–Ω–¥–µ–∫—Å'
  };

  const dbLower = dbName.toLowerCase();
  for (const [key, value] of Object.entries(serviceMap)) {
    if (dbLower.includes(key)) {
      return value;
    }
  }
  
  return dbName; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
}

// –ü–æ–ª—É—á–∞–µ—Ç URL —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
function getServiceUrl(serviceName) {
  const urlMap = {
    '–ê–≤–∏—Ç–æ': 'avito.ru',
    '2 –ë–µ—Ä–µ–≥–∞': '2berega.ru',
    '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ': 'vk.com',
    '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏': 'ok.ru', 
    'Mail.ru': 'mail.ru',
    '–Ø–Ω–¥–µ–∫—Å': 'passport.yandex.ru'
  };
  
  return urlMap[serviceName] || null;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
function generateSpecificActions(services, hasPasswords) {
  const actions = [];
  
  if (hasPasswords) {
    actions.push('üî• –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–æ–ª–∏! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö');
  }
  
  services.forEach(service => {
    if (service.url) {
      actions.push(`–°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ ${service.url} (–Ω–∞–π–¥–µ–Ω–æ ${service.records_found} –∑–∞–ø–∏—Å–µ–π)`);
    }
  });
  
  actions.push('–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö');
  actions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å—á–µ—Ç–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
  
  return actions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ OpenAI (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
function normalizeOpenAIText(res) {
  if (!res || typeof res !== "object") return "";
  
  // 1) Chat Completions shape (–Ω–∞—à —Ç–µ–∫—É—â–∏–π —Å–ª—É—á–∞–π)
  const chatContent = res.choices?.[0]?.message?.content;
  if (chatContent && typeof chatContent === "string") {
    return chatContent.trim();
  }
  
  // 2) Responses API shape (–µ—Å–ª–∏ GPT-5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ)
  if (typeof res.output_text === "string" && res.output_text.length > 0) {
    return res.output_text.trim();
  }
  
  // 3) output[].content[].text
  const outputText = res.output?.flatMap(o => 
    o?.content?.flatMap(c => c?.text?.value || c?.text)?.filter(Boolean)
  )?.join("\n");
  if (outputText) return outputText.trim();
  
  // 4) Legacy completions
  const legacyText = res.choices?.[0]?.text;
  if (legacyText && typeof legacyText === "string") {
    return legacyText.trim();
  }
  
  return "";
}

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫
app.post('/api/ai-leak-analysis', optionalAuth, userRateLimit(5, 15 * 60 * 1000), async (req, res) => {
  console.log('üöÄ AI Leak Analysis endpoint hit!');
  console.log('üì• Request method:', req.method);
  console.log('üìã Content-Type:', req.headers['content-type']);
  console.log('üì¶ Body exists:', !!req.body);
  
  try {
    const { query, field, results } = req.body || {};
    console.log('üîç AI Leak Analysis request received');
    console.log('ÔøΩ Request data:');
    console.log('- Query:', query);
    console.log('- Field:', field);
    console.log('- Results count:', results?.length || 0);
    
    if (!results || !Array.isArray(results) || results.length === 0) {
      console.log('‚ùå No results provided or invalid format');
      return res.status(400).json({ 
        ok: false,
        error: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—á–µ–∫, –∞ –Ω–µ –∫–æ–º–ø–∞–Ω–∏–π
    const isLeakData = results.some(result => 
      result.name && ['ITP', 'Dyxless', 'LeakOsint', 'Usersbox', 'Vektor'].includes(result.name)
    );
    
    if (!isLeakData) {
      console.log('‚ùå Not leak data:', results.map(r => r.name));
      return res.status(400).json({ 
        ok: false,
        error: '–ò–ò –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    const hasActualLeaks = results.some(result => {
      if (!result.ok || !result.items) return false;
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceName = result.name;
      if (sourceName === 'ITP' && typeof result.items === 'object') {
        // ITP –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        return Object.values(result.items).some(db => 
          db.data && Array.isArray(db.data) && db.data.length > 0
        );
      } else if (['Dyxless', 'LeakOsint', 'Usersbox', 'Vektor'].includes(sourceName)) {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –º–∞—Å—Å–∏–≤
        return Array.isArray(result.items) && result.items.length > 0;
      }
      return false;
    });

    if (!hasActualLeaks) {
      console.log('üìã No actual leak data found, returning clean analysis');
      return res.json({
        ok: true,
        analysis: {
          risk_level: "low",
          summary: "–£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
          security_recommendations: {
            password_change_sites: [],
            immediate_actions: ["–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"]
          }
        },
        model: 'static-clean',
        query,
        field
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI
    if (!openai) {
      return res.status(503).json({
        ok: false,
        error: '–ò–ò –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DeepSeek V3
    console.log('üì¶ Processing results for DeepSeek V3 analysis...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DeepSeek V3
    const summarizedResults = results.map(result => {
      if (!result.ok || !result.items) {
        return { name: result.name, status: 'no_data', error: result.error?.substring?.(0, 100) };
      }
      
      let itemCount = 0;
      let databases = [];
      let sampleRecord = null;
      
      if (result.name === 'ITP' && typeof result.items === 'object') {
        // –î–ª—è ITP - –ø–µ—Ä–µ–¥–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –±–∞–∑ (—Å –ª–∏–º–∏—Ç–æ–º) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞
        const allITPData = {};
        let totalRecords = 0;
        
        for (const [dbName, dbData] of Object.entries(result.items)) {
          if (dbData.data && Array.isArray(dbData.data) && dbData.data.length > 0) {
            // –ë–µ—Ä–µ–º –¥–æ 8 –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–∞–∂–¥–æ–π –±–∞–∑—ã –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
            allITPData[dbName] = {
              totalCount: dbData.data.length,
              samples: dbData.data.slice(0, 8) // –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            };
            totalRecords += dbData.data.length;
          }
        }
        
        return { 
          name: result.name, 
          status: 'found_data',
          totalRecords: totalRecords,
          data: allITPData // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        };
      } else if (Array.isArray(result.items) && result.items.length > 0) {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - –ø–µ—Ä–µ–¥–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ (—Å –ª–∏–º–∏—Ç–æ–º) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞
        const limitedData = result.items.slice(0, 15); // –î–æ 15 –∑–∞–ø–∏—Å–µ–π –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        
        return { 
          name: result.name, 
          status: 'found_data',
          totalRecords: result.items.length,
          data: limitedData // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        };
      }
      
      return { name: result.name, status: 'found_data', items: result.items };
    });
    
    const compressedData = JSON.stringify({
      query: query,
      field: field,
      sources: summarizedResults.filter(r => r.status === 'found_data')
    });
    
    console.log('üìù Sending compressed data to DeepSeek V3, length:', compressedData.length);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeepSeek V3
    if (!openai) {
      console.error('‚ùå DeepSeek V3 client not initialized');
      return res.status(503).json({
        ok: false,
        error: '–ò–ò –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }

    console.log('üì§ Starting DeepSeek V3 security analysis...');
    console.log('‚è∞ Analysis time:', new Date().toISOString());
    
    const startTime = Date.now();
    
    try {
      // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π)
      const systemPrompt = `–¢—ã - —Å—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.`;

      const userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ç–µ—á–∫–∞—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}" (–ø–æ–ª–µ: ${field}) –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∑–≤–µ–∑–¥–æ—á–∫–∏ (**) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ## –∏–ª–∏ #.

–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:

1. **–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Ç–µ—á–µ–∫:**
   –ü—Ä–µ–¥—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–¥–∞—É–Ω-—Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏: "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ç–µ—á–∫–∏", "–ì–æ–¥", "–û—Ç—Ä–∞—Å–ª—å", "–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏". –£–ø–æ—Ä—è–¥–æ—á—å —Ç–∞–±–ª–∏—Ü—É –ø–æ —É—Ä–æ–≤–Ω—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É). –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (—Å–≤—è–∑–∫–∞ –§–ò–û+–∞–¥—Ä–µ—Å+—Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ –∏ —Ç.–¥.).

2. **–ö–∞—Ä—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞:**
   –°–æ–∑–¥–∞–π markdown-—Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ–ª–±—Ü—ã: "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ç–µ—á–∫–∏", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è". –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ—Ñ–æ–Ω + –§–ò–û –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞).

3. **–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π:**
   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∏—Å–∫–∞ —É–∫–∞–∂–∏:
   - –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¶–µ–ª–µ–≤–æ–π —Ñ–∏—à–∏–Ω–≥").
   - –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, üü† –í—ã—Å–æ–∫–∏–π, üü° –°—Ä–µ–¥–Ω–∏–π).
   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å *–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º* —Ç–æ–≥–æ, –∫–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏, –Ω–æ –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑.

4. **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –∑–∞—â–∏—Ç–µ (Roadmap):**
   –ü—Ä–µ–¥–ª–æ–∂–∏ —á–µ—Ç–∫–∏–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø—ã:
   - **–®–ê–ì 1: –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–ü–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞)** (—Å–∞–º—ã–µ —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π, –≤–∫–ª—é—á–µ–Ω–∏–µ 2FA).
   - **–®–ê–ì 2: –ü–†–û–ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–©–ò–¢–ê (–ù–µ–¥–µ–ª—è)** (–º–µ—Ä—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫).
   - **–®–ê–ì 3: –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø** (–ø—Ä–∏–≤—ã—á–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π).
   –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º.

5. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–π:**
   –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏. –í–∫–ª—é—á–∞–π:
   - –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
   - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã (VK, Mail.ru, Yandex, Google)
   - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã (Wildberries, OZON, Lamoda)
   - –ì–æ—Å—É—Å–ª—É–≥–∏ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
   - –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
   –§–æ—Ä–º–∞—Ç: –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.

**–¢–æ–Ω –æ—Ç—á–µ—Ç–∞:** –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω–µ—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í –∫–æ–Ω—Ü–µ –æ—Ç—á–µ—Ç–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞—É–¥–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
${compressedData}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:`;

      const completion = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 6000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        temperature: 0.2, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        top_p: 0.8, // –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π top_p –¥–ª—è —Ñ–æ–∫—É—Å–∞
        stream: false // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º streaming
      });

      const analysis = completion.choices[0].message.content;
      const endTime = Date.now();
      
      console.log(`‚è∞ DeepSeek V3 analysis completed in ${endTime - startTime}ms`);
      console.log('‚úÖ DeepSeek V3 analysis preview:', analysis.substring(0, 200) + '...');
      
      return res.json({
        ok: true,
        analysis,
        model: 'deepseek-chat',
        query,
        field,
        responseTime: endTime - startTime,
        usage: completion.usage
      });

    } catch (aiError) {
      console.error('‚ùå DeepSeek V3 analysis error:', aiError);
      
      // Fallback –∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò
      const fallbackAnalysis = createPracticalSecurityAnalysis(results, query, field);
      const endTime = Date.now();
      
      return res.json({
        ok: true,
        analysis: `‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:\n\n${JSON.stringify(fallbackAnalysis, null, 2)}`,
        model: 'fallback-analysis',
        query,
        field,
        responseTime: endTime - startTime,
        error: aiError.message
      });
    }

  } catch (error) {
    console.error('AI leak analysis error:', error);
    res.status(500).json({
      ok: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö'
    });
  }
});// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
function summarizeLeakData(results) {
  let summary = '';
  
  results.forEach(result => {
    if (!result.ok || !result.items) {
      summary += `${result.name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      return;
    }

    const sourceName = result.name;
    let count = 0;
    let databases = [];

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if (sourceName === 'ITP' && typeof result.items === 'object') {
      for (const [category, items] of Object.entries(result.items)) {
        if (Array.isArray(items) && items.length > 0) {
          count += items.length;
          databases.push(category);
        }
      }
    } else if (Array.isArray(result.items)) {
      count = result.items.length;
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
      const dbNames = result.items.map(item => item.database || item.source).filter(Boolean);
      databases = [...new Set(dbNames)];
    }

    if (count > 0) {
      summary += `${sourceName}: ${count} –∑–∞–ø–∏—Å–µ–π`;
      if (databases.length > 0) {
        summary += ` –≤ –±–∞–∑–∞—Ö: ${databases.slice(0, 3).join(', ')}`;
        if (databases.length > 3) summary += ` –∏ –µ—â–µ ${databases.length - 3}`;
      }
      summary += '\n';
    }
  });

  return summary || '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫
function extractDetailedLeakData(results) {
  let detailedData = '';
  let totalLeaks = 0;
  let uniqueDatabases = new Set();
  let sensitiveData = [];

  results.forEach(result => {
    if (!result.ok || !result.items) {
      detailedData += `${result.name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      return;
    }

    const sourceName = result.name;
    detailedData += `\n=== ${sourceName} ===\n`;

    if (sourceName === 'ITP' && typeof result.items === 'object') {
      for (const [category, items] of Object.entries(result.items)) {
        if (Array.isArray(items) && items.length > 0) {
          detailedData += `${category}: ${items.length} –∑–∞–ø–∏—Å–µ–π\n`;
          totalLeaks += items.length;
          uniqueDatabases.add(category);
          
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          items.slice(0, 3).forEach(item => {
            if (item.password) sensitiveData.push(`–ü–∞—Ä–æ–ª—å: ${item.password}`);
            if (item.email) sensitiveData.push(`Email: ${item.email}`);
            if (item.phone) sensitiveData.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${item.phone}`);
            if (item.login) sensitiveData.push(`–õ–æ–≥–∏–Ω: ${item.login}`);
          });
        }
      }
    } else if (Array.isArray(result.items)) {
      detailedData += `–ù–∞–π–¥–µ–Ω–æ: ${result.items.length} –∑–∞–ø–∏—Å–µ–π\n`;
      totalLeaks += result.items.length;
      
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      result.items.slice(0, 3).forEach(item => {
        if (item.database) uniqueDatabases.add(item.database);
        if (item.source) uniqueDatabases.add(item.source);
        
        if (item.password) sensitiveData.push(`–ü–∞—Ä–æ–ª—å: ${item.password}`);
        if (item.email) sensitiveData.push(`Email: ${item.email}`);
        if (item.phone) sensitiveData.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${item.phone}`);
        if (item.login) sensitiveData.push(`–õ–æ–≥–∏–Ω: ${item.login}`);
        if (item.data) sensitiveData.push(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(item.data).substring(0, 100)}`);
      });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
  detailedData += `\n=== –°–í–û–î–ö–ê ===\n`;
  detailedData += `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–µ—á–µ–∫: ${totalLeaks}\n`;
  detailedData += `–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${Array.from(uniqueDatabases).join(', ')}\n`;
  
  if (sensitiveData.length > 0) {
    detailedData += `\n–ü—Ä–∏–º–µ—Ä—ã —É—Ç–µ—á–µ–∫ (–ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏):\n`;
    detailedData += sensitiveData.slice(0, 10).join('\n');
  }

  return detailedData;
}

app.get('/api/health', (_req, res) => {
  res.status(200).json({ 
    ok: true, 
    version: '2.0', 
    design: 'modern',
    timestamp: new Date().toISOString(),
    port: PORT,
    env: process.env.NODE_ENV || 'development'
  });
});

// –ü—Ä–æ—Å—Ç–æ–π healthcheck –¥–ª—è Railway
app.get('/health', (_req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
    res.status(200).json({ 
      status: 'OK', 
      timestamp: new Date().toISOString(),
      uptime: Math.floor(process.uptime()),
      port: PORT,
      env: process.env.NODE_ENV || 'development'
    });
  } catch (error) {
    console.error('‚ùå Health check failed:', error);
    res.status(500).json({ 
      status: 'ERROR', 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Root endpoint
app.get('/', (_req, res) => {
  res.status(200).json({ 
    message: 'DataTrace API Server', 
    version: '2.0',
    endpoints: ['/api/health', '/health', '/modern']
  });
});

// –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º endpoint
app.get('/modern', (_req, res) => {
  res.set({
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  });
  res.sendFile(path.join(__dirname, '..', 'public', 'datatrace-modern.html'));
});

// –°—Ç–∞—Ä—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.get('/old', (_req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'datatrace-styled.html'));
});

app.get('*', (_req, res) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  res.set({
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  });
  res.sendFile(path.join(__dirname, '..', 'public', 'datatrace-modern.html'));
});

// Snusbase API endpoints
const SnusbaseService = require('./services/SnusbaseService');
const snusbaseService = new SnusbaseService();

// Snusbase connection test endpoint (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
app.get('/api/snusbase/test', userRateLimit(3, 60 * 60 * 1000), async (req, res) => {
  try {
    console.log('üîç Snusbase connection test request');

    const testResult = await snusbaseService.testConnection();

    if (!testResult.success) {
      console.error('‚ùå Snusbase connection test failed:', testResult.error);
      return res.status(500).json({
        ok: false,
        error: testResult.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Snusbase'
      });
    }

    console.log('‚úÖ Snusbase connection test successful');

    res.json({
      ok: true,
      connection: 'successful',
      rows: testResult.rows,
      tablesCount: testResult.tablesCount,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Snusbase connection test error:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
    });
  }
});

// Domain search endpoint for Snusbase (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.post('/api/snusbase/domain-search', userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    const { domain } = req.body;
    
    if (!domain || typeof domain !== 'string') {
      return res.status(400).json({
        ok: false,
        error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞'
      });
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞
    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(domain.trim())) {
      return res.status(400).json({
        ok: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: company.com)'
      });
    }

    console.log(`üåê Snusbase domain search request for: ${domain}`);

    const cleanDomain = domain.trim().toLowerCase();
    const searchResult = await snusbaseService.searchByDomain(cleanDomain);

    if (!searchResult.success) {
      console.error(`‚ùå Snusbase search failed for ${cleanDomain}:`, searchResult.error);
      return res.status(500).json({
        ok: false,
        error: searchResult.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫'
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedResult = snusbaseService.formatForFrontend(searchResult);

    console.log(`‚úÖ Snusbase search completed for ${cleanDomain}: ${formattedResult.totalResults} results`);
    console.log(`üìä Results structure:`, {
      totalResults: formattedResult.totalResults,
      resultsLength: formattedResult.results?.length,
      hasResults: Array.isArray(formattedResult.results),
      firstResult: formattedResult.results?.[0] ? 'has data' : 'empty',
      analysisPresent: !!formattedResult.analysis
    });

    res.json({
      ok: true,
      domain: cleanDomain,
      results: formattedResult.results,
      databases: formattedResult.databases,
      analysis: formattedResult.analysis,
      summary: formattedResult.summary,
      metadata: formattedResult.metadata,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Snusbase domain search error:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Ç–µ—á–µ–∫'
    });
  }
});

// Snusbase stats endpoint
app.post('/api/snusbase/stats', requireAuth, userRateLimit(5, 15 * 60 * 1000), async (req, res) => {
  try {
    const { domain } = req.body;
    
    if (!domain || typeof domain !== 'string') {
      return res.status(400).json({
        ok: false,
        error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      });
    }

    console.log(`üìä Snusbase stats request for: ${domain}`);

    const cleanDomain = domain.trim().toLowerCase();
    const statsResult = await snusbaseService.getDomainStats(cleanDomain);

    if (!statsResult.success) {
      console.error(`‚ùå Snusbase stats failed for ${cleanDomain}:`, statsResult.error);
      return res.status(500).json({
        ok: false,
        error: statsResult.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      });
    }

    console.log(`‚úÖ Snusbase stats completed for ${cleanDomain}`);

    res.json({
      ok: true,
      domain: cleanDomain,
      stats: statsResult.stats,
      metadata: statsResult.metadata,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Snusbase stats error:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// Snusbase databases list endpoint
app.get('/api/snusbase/databases', requireAuth, userRateLimit(3, 60 * 60 * 1000), async (req, res) => {
  try {
    console.log('üìã Snusbase databases list request');

    const databasesResult = await snusbaseService.getDatabases();

    if (!databasesResult.success) {
      console.error('‚ùå Snusbase databases list failed:', databasesResult.error);
      return res.status(500).json({
        ok: false,
        error: databasesResult.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö'
      });
    }

    console.log(`‚úÖ Snusbase databases list completed: ${databasesResult.databases.length} databases`);

    res.json({
      ok: true,
      databases: databasesResult.databases,
      metadata: databasesResult.metadata,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Snusbase databases error:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö'
    });
  }
});

app.listen(PORT, '0.0.0.0', (error) => {
  if (error) {
    console.error('‚ùå Server failed to start:', error);
    process.exit(1);
  }
  
  // eslint-disable-next-line no-console
  console.log(`üöÄ Server listening on http://0.0.0.0:${PORT}`);
  console.log(`üè• Health check available at http://0.0.0.0:${PORT}/health`);
  console.log(`üìä API health at http://0.0.0.0:${PORT}/api/health`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`‚ö° Server started successfully at ${new Date().toISOString()}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è Railway
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('üì¥ SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üì¥ SIGINT received, shutting down gracefully');
  process.exit(0);
});


