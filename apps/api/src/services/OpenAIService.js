const OpenAI = require('openai');

class OpenAIService {
  constructor(apiKey, model = 'gpt-5') {
    this.apiKey = apiKey;
    this.model = model;
    this.client = null;
    this.isInitialized = false;
    
    this.initialize();
  }

  initialize() {
    if (!this.apiKey || this.apiKey.trim() === '') {
      console.warn('‚ö†Ô∏è OpenAI API key not provided');
      return;
    }

    try {
      this.client = new OpenAI({ apiKey: this.apiKey });
      this.isInitialized = true;
      console.log('‚úÖ OpenAI service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize OpenAI client:', error.message);
      this.isInitialized = false;
    }
  }

  isAvailable() {
    return this.isInitialized && this.client !== null;
  }

  isGPT5Model() {
    return this.model && this.model.toLowerCase().includes('gpt-5');
  }

  async generateSummary(data, type = 'company') {
    if (!this.isAvailable()) {
      // Provide a structured fallback immediately to avoid breaking flows
      return this.createFallbackResponse(data, type);
    }

    const prompt = this.createPrompt(data, type);
    
    try {
      if (this.isGPT5Model()) {
        return await this.handleResponsesAPI(prompt);
      } else {
        return await this.handleChatCompletionsAPI(prompt);
      }
    } catch (error) {
      console.error('OpenAI API error:', error.message);
      throw error;
    }
  }

  async handleResponsesAPI(prompt) {
    console.log('üöÄ Using OpenAI Responses API for GPT-5...');
    
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('OpenAI request timeout (20s)')), 20000);
    });

    try {
      const responsePromise = this.client.responses.create({
        model: this.model,
        input: prompt.system + '\n\n' + JSON.stringify(prompt.instruction),
        text: {
          format: {
            type: 'json_object'
          }
        },
        temperature: 0.7,
        max_output_tokens: 2000
      });

      const response = await Promise.race([responsePromise, timeoutPromise]);
      
      // Extract text from Responses API format
      let responseText = '';
      if (response.output && response.output.length > 0) {
        const firstOutput = response.output[0];
        if (firstOutput.type === 'message' && firstOutput.content) {
          const textContent = firstOutput.content.find(c => c.type === 'output_text');
          if (textContent) {
            responseText = textContent.text;
          }
        }
      }

      // Fallback for different response formats
      if (!responseText && response.output_text) {
        responseText = response.output_text;
      }

      console.log('‚úÖ Responses API response received');
      
      let parsed;
      try {
        parsed = JSON.parse(responseText || '{}');
      } catch {
        parsed = { raw: responseText, error: 'Failed to parse JSON' };
      }

      return {
        ok: true,
        model: this.model,
        summary: parsed,
        raw_response: responseText
      };

    } catch (error) {
      console.log('‚ùå Responses API failed, falling back to Chat Completions:', error.message);
      
      // Fallback to Chat Completions API
      return await this.handleChatCompletionsAPI(prompt);
    }
  }

  async handleChatCompletionsAPI(prompt) {
    console.log('üîÑ Using Chat Completions API...');
    
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Chat completions timeout (15s)')), 15000);
    });

    const chatPromise = this.client.chat.completions.create({
      model: this.model.includes('gpt-5') ? 'gpt-4' : this.model, // Fallback model for GPT-5
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: prompt.system },
        { role: 'user', content: JSON.stringify(prompt.instruction) }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const completion = await Promise.race([chatPromise, timeoutPromise]);
    console.log('‚úÖ Chat completions response received');
    
    const messageContent = completion.choices?.[0]?.message?.content || '{}';
    let parsed;
    try {
      parsed = JSON.parse(messageContent);
    } catch {
      parsed = { raw: messageContent };
    }

    return {
      ok: true,
      model: this.model.includes('gpt-5') ? 'gpt-4-fallback' : this.model,
      summary: parsed
    };
  }

  createPrompt(data, type) {
    if (type === 'company') {
      return this.createCompanyPrompt(data);
    } else if (type === 'leaks') {
      return this.createLeaksPrompt(data);
    }
    
    throw new Error(`Unknown prompt type: ${type}`);
  }

  createCompanyPrompt(data) {
    const system = '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-5. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—É—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.';
    
    const instruction = {
      task: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –æ–±—ä–µ–¥–∏–Ω–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Datanewton, Checko). –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI.',
      language: 'ru',
      enhanced_processing: '–ò—Å–ø–æ–ª—å–∑—É–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ GPT-5 –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      schema: {
        company: {
          name: 'string|null - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫—Ä–∞—Ç–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é',
          fullName: 'string|null - –ø–æ–ª–Ω–æ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
          shortName: 'string|null - –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
          inn: 'string|null - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ò–ù–ù',
          ogrn: 'string|null - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –û–ì–†–ù',
          kpp: 'string|null',
          opf: 'string|null - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞',
          registration_date: 'string|null - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ DD.MM.YYYY',
          years_from_registration: 'number|null - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          status: 'string|null - —Å—Ç–∞—Ç—É—Å: –î–µ–π—Å—Ç–≤—É–µ—Ç/–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞/–∏ —Ç.–¥.',
          address: 'string|null - –ø–æ–ª–Ω—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
          charter_capital: 'string|null - —É—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª —Å –≤–∞–ª—é—Ç–æ–π',
          contacts: {
            phones: 'string[] - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(XXX)XXX-XX-XX',
            emails: 'string[] - –≤–∞–ª–∏–¥–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞',
            sites: 'string[] - –≤–µ–±-—Å–∞–π—Ç—ã –±–µ–∑ http/https –ø—Ä–µ—Ñ–∏–∫—Å–∞'
          }
        },
        ceo: {
          name: 'string|null - –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è',
          fio: 'string|null - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –§–ò–û',
          position: 'string|null - –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
          post: 'string|null - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'
        },
        managers: '[{ name: string, fio?: string, position?: string, post?: string }] - –≤—Å–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏',
        owners: '[{ name: string, type?: string, inn?: string, share_text?: string, share_percent?: number }] - —É—á—Ä–µ–¥–∏—Ç–µ–ª–∏ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã',
        okved: {
          main: '{ code?: string, text?: string, title?: string } - –æ—Å–Ω–æ–≤–Ω–æ–π –û–ö–í–≠–î',
          additional: '[{ code?: string, text?: string, title?: string }] - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –û–ö–í–≠–î—ã'
        },
        risk_flags: 'string[] - —Ñ–ª–∞–≥–∏ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
        notes: 'string[] - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        former_names: 'string[] - –ø—Ä–µ–∂–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
        predecessors: 'string[] - –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏'
      },
      rules: [
        '–ò—Å–ø–æ–ª—å–∑—É–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ GPT-5 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
        '–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
        '–û–±—ä–µ–¥–∏–Ω—è–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–º –¥–∞–Ω–Ω—ã–º',
        '–£–¥–∞–ª—è–π –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–π —Ñ–æ—Ä–º–∞—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, –¥–∞—Ç—ã, –∞–¥—Ä–µ—Å–∞)',
        '–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É, –≤—ã–±–∏—Ä–∞–π –Ω–∞–∏–±–æ–ª–µ–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ',
        '–ó–∞–ø–æ–ª–Ω—è–π years_from_registration –Ω–∞ –æ—Å–Ω–æ–≤–µ registration_date',
        '–ù–æ—Ä–º–∞–ª–∏–∑—É–π —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç +7(XXX)XXX-XX-XX',
        '–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî —Å—Ç–∞–≤—å null –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤',
        '–î–æ–±–∞–≤–ª—è–π –≤ risk_flags –ª—é–±—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
        '–í notes –≤–∫–ª—é—á–∞–π –≤–∞–∂–Ω—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
      ],
      inn: data.query,
      sources: data.results
    };

    return { system, instruction };
  }

  createLeaksPrompt(data) {
    const system = '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É.';
    
    const instruction = {
      task: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–π –ø–æ–Ω—è—Ç–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
      language: 'ru',
      schema: {
        found: 'boolean - –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —É—Ç–µ—á–∫–∏',
        sources: 'object - —Å—Ç–∞—Ç—É—Å –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É',
        highlights: 'string[] - –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏',
        person: {
          name: 'string|null',
          phones: 'string[]',
          emails: 'string[]',
          usernames: 'string[]',
          ids: 'string[]',
          addresses: 'string[]'
        },
        recommendations: 'string[] - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
      },
      query: data.query,
      field: data.field,
      sources: data.results
    };

    return { system, instruction };
  }

  createFallbackResponse(data, type) {
    if (type === 'company') {
      return this.createCompanyFallback(data);
    } else if (type === 'leaks') {
      return this.createLeaksFallback(data);
    }
    
    return {
      ok: true,
      model: 'fallback',
      summary: { error: 'Unknown type for fallback response' }
    };
  }

  createCompanyFallback(data) {
    const { query: inn, results } = data;
    
    let fallbackSummary = {
      company: {
        name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        inn: inn,
        status: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        address: "–ù–µ —É–∫–∞–∑–∞–Ω",
        contacts: { phones: [], emails: [], sites: [] }
      },
      ceo: { name: null, position: null },
      managers: [],
      owners: [],
      okved: { main: null, additional: [] },
      risk_flags: [],
      notes: ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
      former_names: [],
      predecessors: []
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try {
      for (const result of results) {
        if (result.ok && result.items) {
          const items = result.items;

          // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
          if (items.company_names?.short_name) {
            fallbackSummary.company.name = items.company_names.short_name;
          } else if (items.company_names?.full_name) {
            fallbackSummary.company.name = items.company_names.full_name;
          } else if (items.name) {
            fallbackSummary.company.name = items.name;
          }

          // –ê–¥—Ä–µ—Å
          if (items.address?.line_address) {
            fallbackSummary.company.address = items.address.line_address;
          } else if (items.address) {
            fallbackSummary.company.address = items.address;
          }

          // –°—Ç–∞—Ç—É—Å
          if (items.status) {
            fallbackSummary.company.status = items.status;
          } else if (items.state) {
            fallbackSummary.company.status = items.state;
          }

          // –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
          if (items.ceo?.name || items.manager?.name) {
            fallbackSummary.ceo = {
              name: items.ceo?.name || items.manager?.name,
              position: items.ceo?.position || items.manager?.position || '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
            };
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (fallbackSummary.company.name !== "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞") {
        fallbackSummary.notes = [
          `–ö–æ–º–ø–∞–Ω–∏—è ${fallbackSummary.company.name} —Å –ò–ù–ù ${inn}.`,
          `–°—Ç–∞—Ç—É—Å: ${fallbackSummary.company.status}.`,
          '–ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.'
        ];
      }
    } catch (error) {
      console.error('Fallback processing error:', error);
      fallbackSummary.notes.push('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    return {
      ok: true,
      model: 'fallback',
      summary: fallbackSummary
    };
  }

  createLeaksFallback(data) {
    const { query, field, results } = data;
    
    let found = false;
    let sources = {};
    let highlights = [];
    let person = {
      name: null,
      phones: [],
      emails: [],
      usernames: [],
      ids: [],
      addresses: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    for (const result of results) {
      if (result && result.name) {
        let foundCount = 0;
        let notes = '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

        if (result.ok && result.items) {
          found = true;
          
          if (result.name === 'ITP' && typeof result.items === 'object') {
            for (const [category, items] of Object.entries(result.items)) {
              if (Array.isArray(items) && items.length > 0) {
                foundCount += items.length;
                highlights.push(`${category}: ${items.length} –∑–∞–ø–∏—Å–µ–π`);
              }
            }
          } else if (Array.isArray(result.items)) {
            foundCount = result.items.length;
            if (foundCount > 0) {
              highlights.push(`${result.name}: ${foundCount} –∑–∞–ø–∏—Å–µ–π`);
            }
          }

          notes = foundCount > 0 ? '–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        }

        sources[result.name] = { foundCount, notes };
      }
    }

    if (!found) {
      highlights.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return {
      ok: true,
      model: 'fallback',
      summary: {
        found,
        sources,
        highlights,
        person,
        recommendations: [
          '–ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          '–ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
          '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ'
        ]
      }
    };
  }
}

module.exports = OpenAIService;