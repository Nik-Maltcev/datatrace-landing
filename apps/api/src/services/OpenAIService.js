const OpenAI = require('openai');

class OpenAIService {
  constructor(apiKey, model = 'gpt-5') {
    this.apiKey = apiKey;
    this.model = model;
    this.client = null;
    this.isInitialized = false;
    
    this.initialize();
  }

  initialize() {
    if (!this.apiKey || this.apiKey.trim() === '') {
      console.warn('‚ö†Ô∏è OpenAI API key not provided');
      return;
    }

    try {
      this.client = new OpenAI({ apiKey: this.apiKey });
      this.isInitialized = true;
      console.log('‚úÖ OpenAI service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize OpenAI client:', error.message);
      this.isInitialized = false;
    }
  }

  isAvailable() {
    return this.isInitialized && this.client !== null;
  }

  async generateSummary(data, type = 'company') {
    if (!this.isAvailable()) {
      console.log('‚ùå OpenAI service is not available, returning fallback.');
      return this.createFallbackResponse(data, type);
    }

    const { system, user } = this.createPrompt(data, type);

    try {
      console.log(`üöÄ Calling OpenAI Chat Completions API with model ${this.model}...`);
    
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('OpenAI request timed out after 30 seconds')), 30000);
      });

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å fallback
      const modelsToTry = [this.model, 'gpt-4o', 'gpt-4o-mini'];
      let completion;
      let usedModel = this.model;
      
      for (const model of modelsToTry) {
        try {
          console.log(`üîÑ Trying model: ${model}`);
          
          const chatPromise = this.client.chat.completions.create({
            model: model,
            response_format: { type: 'json_object' },
            messages: [
              { role: 'system', content: system },
              { role: 'user', content: user }
            ],
            temperature: 0.5,
            max_tokens: 2048,
          });

          completion = await Promise.race([chatPromise, timeoutPromise]);
          usedModel = model;
          console.log(`‚úÖ Successfully used model: ${model}`);
          break;
          
        } catch (modelError) {
          console.log(`‚ùå Model ${model} failed: ${modelError.message}`);
          if (model === modelsToTry[modelsToTry.length - 1]) {
            throw modelError; // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          }
          continue;
        }
      }
      console.log('‚úÖ OpenAI Chat Completions response received.');
    
    const messageContent = completion.choices?.[0]?.message?.content || '{}';
      let parsedSummary;
      try {
        parsedSummary = JSON.parse(messageContent);
      } catch (e) {
        console.error('‚ùå Failed to parse JSON response from OpenAI:', e);
        parsedSummary = { error: 'Failed to parse AI response', raw: messageContent };
    }

    return {
      ok: true,
        summary: parsedSummary,
        provider: 'openai',
        model: usedModel,
        usage: completion.usage,
      };

    } catch (error) {
      console.error('‚ùå OpenAI API call failed:', error.message);
      // Return a structured error response with a fallback
      return this.createFallbackResponse(data, type, error);
    }
  }

  createPrompt(data, type) {
    if (type === 'company') {
      return this.createCompanyPrompt(data);
    } else if (type === 'leaks') {
      return this.createLeaksPrompt(data);
    }
    
    throw new Error(`Unknown prompt type: ${type}`);
  }

  createCompanyPrompt(data) {
    const system = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (GPT-5 –∫–ª–∞—Å—Å). –¢–µ–±–µ –ø–µ—Ä–µ–¥–∞—é—Ç —É–∂–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–ó–∞–¥–∞—á–∞: —Å–æ–±—Ä–∞—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –ø–æ —Å—Ö–µ–º–µ –Ω–∏–∂–µ.`;

    const user = `–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ò–ù–ù: ${data.query || 'unknown'}):

\`\`\`json
${JSON.stringify(data.summary, null, 2)}
\`\`\`

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–æ—Ä–º–∞–ª–∏–∑—É–π —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—Ñ–æ—Ä–º–∞—Ç +7(XXX)XXX-XX-XX), –¥–∞—Ç—ã (YYYY-MM-DD), —É–±–µ—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –ø–æ–ª—è.
- –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤—å null –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
- –í \"years_from_registration\" –ø–æ—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç –æ—Ç –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞.
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ.

–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞:
{
  "company": {
    "name": "string|null",
    "fullName": "string|null",
    "shortName": "string|null",
    "inn": "string|null",
    "ogrn": "string|null",
    "kpp": "string|null",
    "opf": "string|null",
    "registration_date": "string|null",
    "years_from_registration": "number|null",
    "status": "string|null",
    "address": "string|null",
    "activity": "string|null",
    "charter_capital": "string|null",
    "contacts": {
      "phones": ["string"],
      "emails": ["string"],
      "sites": ["string"]
    }
  },
  "ceo": { "name": "string|null", "fio": "string|null", "position": "string|null", "post": "string|null" },
  "managers": [{ "name": "string", "fio": "string|optional", "position": "string|optional", "post": "string|optional" }],
  "owners": [{ "name": "string", "type": "string|optional", "inn": "string|optional", "share_text": "string|optional", "share_percent": "number|optional" }],
  "okved": { "main": { "code": "string|optional", "text": "string|optional", "title": "string|optional" }, "additional": [{ "code": "string|optional", "text": "string|optional", "title": "string|optional" }] },
  "risk_flags": ["string"],
  "notes": ["string"],
  "highlights": ["string"],
  "ai_analysis": "string",
  "reliability_score": "–í—ã—Å–æ–∫–∞—è|–°—Ä–µ–¥–Ω—è—è|–ù–∏–∑–∫–∞—è|–¢—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏"
}`;
    return { system, user };
  }

  createLeaksPrompt(data) {
    const system = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –µ–º–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;

    const user = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ç–µ—á–∫–∞–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${data.query}" –∏ –≤–µ—Ä–Ω–∏ JSON.

**–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:**
\`\`\`json
${JSON.stringify(data.results, null, 2)}
\`\`\`

**–¢–≤–æ—è –∑–∞–¥–∞—á–∞:**
1.  –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª–∏, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ (\`found\`).
2.  –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª–µ \`highlights\` —Å –∫–ª—é—á–µ–≤—ã–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–æ–ª–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ X", "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥—Ä–µ—Å –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ Y").
3.  –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª–µ \`person\`, —Å–æ–±—Ä–∞–≤ –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–µ–Ω–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, email) –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
4.  –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —á–µ—Ç–∫–∏–µ \`security_recommendations\` (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö", "–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é").
5.  –î–∞–π –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –ø–æ–ª–µ \`summary\`.
6.  –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (\`risk_level\`).

**–í–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**
\`\`\`json
{
  "found": true | false,
  "sources": "object - —Å—Ç–∞—Ç—É—Å –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É, –∫–∞–∫ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
  "highlights": ["–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 1", "–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 2"],
  "person": {
    "name": "string | null",
    "phones": ["string"],
    "emails": ["string"],
    "usernames": ["string"]
  },
  "security_recommendations": {
    "password_change_sites": ["site1.com"],
    "immediate_actions": ["–°—Ä–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1"]
  },
  "risk_level": "low | medium | high | critical",
  "summary": "–¢–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏."
}
\`\`\`
`;
    return { system, user };
  }

  createFallbackResponse(data, type) {
    if (type === 'company') {
      return this.createCompanyFallback(data);
    } else if (type === 'leaks') {
      return this.createLeaksFallback(data);
    }
    
    return {
      ok: true,
      model: 'fallback',
      summary: { error: 'Unknown type for fallback response' }
    };
  }

  createCompanyFallback(data) {
    const { query: inn } = data || {};
    // results –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º summary; –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const results = Array.isArray(data?.results) ? data.results : [];
    
    let fallbackSummary = {
      company: {
        name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        inn: inn,
        status: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        address: "–ù–µ —É–∫–∞–∑–∞–Ω",
        contacts: { phones: [], emails: [], sites: [] }
      },
      ceo: { name: null, position: null },
      managers: [],
      owners: [],
      okved: { main: null, additional: [] },
      risk_flags: [],
      notes: ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
      former_names: [],
      predecessors: []
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try {
      for (const result of results || []) {
        if (result.ok && result.items) {
          const items = result.items;

          // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
          if (items.company_names?.short_name) {
            fallbackSummary.company.name = items.company_names.short_name;
          } else if (items.company_names?.full_name) {
            fallbackSummary.company.name = items.company_names.full_name;
          } else if (items.name) {
            fallbackSummary.company.name = items.name;
          }

          // –ê–¥—Ä–µ—Å
          if (items.address?.line_address) {
            fallbackSummary.company.address = items.address.line_address;
          } else if (items.address) {
            fallbackSummary.company.address = items.address;
          }

          // –°—Ç–∞—Ç—É—Å
          if (items.status) {
            fallbackSummary.company.status = items.status;
          } else if (items.state) {
            fallbackSummary.company.status = items.state;
          }

          // –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
          if (items.ceo?.name || items.manager?.name) {
            fallbackSummary.ceo = {
              name: items.ceo?.name || items.manager?.name,
              position: items.ceo?.position || items.manager?.position || '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
            };
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (fallbackSummary.company.name !== "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞") {
        fallbackSummary.notes = [
          `–ö–æ–º–ø–∞–Ω–∏—è ${fallbackSummary.company.name} —Å –ò–ù–ù ${inn}.`,
          `–°—Ç–∞—Ç—É—Å: ${fallbackSummary.company.status}.`,
          '–ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.'
        ];
      }
    } catch (error) {
      console.error('Fallback processing error:', error);
      fallbackSummary.notes.push('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    return {
      ok: true,
      model: 'fallback',
      summary: fallbackSummary
    };
  }

  createLeaksFallback(data) {
    const { query, field, results } = data;
    
    let found = false;
    let sources = {};
    let highlights = [];
    let person = {
      name: null,
      phones: [],
      emails: [],
      usernames: [],
      ids: [],
      addresses: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    for (const result of results) {
      if (result && result.name) {
        let foundCount = 0;
        let notes = '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

        if (result.ok && result.items) {
          found = true;
          
          if (result.name === 'ITP' && typeof result.items === 'object') {
            for (const [category, items] of Object.entries(result.items)) {
              if (Array.isArray(items) && items.length > 0) {
                foundCount += items.length;
                highlights.push(`${category}: ${items.length} –∑–∞–ø–∏—Å–µ–π`);
              }
            }
          } else if (Array.isArray(result.items)) {
            foundCount = result.items.length;
            if (foundCount > 0) {
              highlights.push(`${result.name}: ${foundCount} –∑–∞–ø–∏—Å–µ–π`);
            }
          }

          notes = foundCount > 0 ? '–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        }

        sources[result.name] = { foundCount, notes };
      }
    }

    if (!found) {
      highlights.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return {
      ok: true,
      model: 'fallback',
      summary: {
        found,
        sources,
        highlights,
        person,
        recommendations: [
          '–ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          '–ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
          '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ'
        ]
      }
    };
  }
}

module.exports = OpenAIService;