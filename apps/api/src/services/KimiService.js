const axios = require('axios');
const ErrorHandler = require('../utils/ErrorHandler');

class KimiService {
  constructor(apiKey, baseUrl = 'htt  buildPrompt(data, type) {
    const { query, field, results } = data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ results —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!Array.isArray(results)) {
      console.error('KimiService: results is not an array:', typeof results);
      return {
        system: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫.',
        user: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}". –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.`
      };
    }
    
    let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}" (—Ç–∏–ø –ø–æ–∏—Å–∫–∞: ${field}) –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n\n`;
    
    results.forEach((result, index) => {latform.moonshot.ai') {
    this.apiKey = apiKey;
    this.baseUrl = baseUrl;
    this.isEnabled = !!(apiKey && apiKey.trim() !== '');
    
    if (!this.isEnabled) {
      console.warn('‚ö†Ô∏è Kimi API key not provided. Leak analysis will fall back to other services.');
    }
  }

  isAvailable() {
    return this.isEnabled;
  }

  /**
   * Generate AI summary using Kimi K2 API
   * @param {Object} data - Data to summarize (query and results)
   * @param {string} type - Type of summary ('leaks' or 'leak')
   * @returns {Promise<Object>} - AI summary response
   */
  async generateSummary(data, type = 'leaks') {
    if (!this.isAvailable()) {
      throw new Error('Kimi service not available');
    }

    try {
      const prompt = this.buildPrompt(data, type);
      
      const response = await axios.post(`${this.baseUrl}/v1/chat/completions`, {
        model: 'moonshot-v1-128k',
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(type)
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 3000,
        temperature: 0.3,
        top_p: 0.9,
        stream: false
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        timeout: 45000
      });

      const aiResponse = response.data?.choices?.[0]?.message?.content;
      
      if (!aiResponse) {
        throw new Error('Empty response from Kimi API');
      }

      return {
        ok: true,
        summary: this.parseSummaryResponse(aiResponse, type),
        provider: 'kimi',
        model: 'moonshot-v1-128k',
        usage: response.data?.usage
      };
    } catch (error) {
      console.error('Kimi API error:', error);
      
      if (error.response) {
        const status = error.response.status;
        const statusText = error.response.statusText;
        const errorData = error.response.data;
        
        if (status === 401) {
          throw new Error('Kimi API authentication failed. Check your API key.');
        } else if (status === 429) {
          throw new Error('Kimi API rate limit exceeded. Please try again later.');
        } else if (status === 400) {
          throw new Error(`Kimi API bad request: ${errorData?.error?.message || statusText}`);
        } else {
          throw new Error(`Kimi API error: ${status} ${statusText}`);
        }
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('Kimi API request timeout');
      } else {
        throw new Error(`Kimi service error: ${error.message}`);
      }
    }
  }

  /**
   * Get system prompt for leak analysis
   * @param {string} type - Summary type
   * @returns {string} - System prompt
   */
  getSystemPrompt(type) {
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –∏ —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "found": true/false,
  "sources": {
    "source_name": {
      "foundCount": —á–∏—Å–ª–æ_–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö_–∑–∞–ø–∏—Å–µ–π,
      "notes": "–æ–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞—Ö–æ–¥–æ–∫"
    }
  },
  "highlights": ["–∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"],
  "person": {
    "name": null,
    "phones": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"],
    "emails": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ email"],
    "usernames": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã"],
    "ids": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID"],
    "addresses": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"]
  },
  "recommendations": [
    "üîí –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "‚ö†Ô∏è –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
    "üõ°Ô∏è –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã"
  ],
  "ai_analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ —Å –æ—Ü–µ–Ω–∫–æ–π —Ä–∏—Å–∫–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
  "risk_level": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π/–í—ã—Å–æ–∫–∏–π/–°—Ä–µ–¥–Ω–∏–π/–ù–∏–∑–∫–∏–π",
  "summary_stats": {
    "total_sources": —á–∏—Å–ª–æ_–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤,
    "sources_with_data": —á–∏—Å–ª–æ_–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤_—Å_–¥–∞–Ω–Ω—ã–º–∏,
    "total_records": –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø–∏—Å–µ–π
  }
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û—Ü–µ–Ω–∏ —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –≤ —Å–æ–≤–µ—Ç–∞—Ö`;
  }

  /**
   * Build prompt for leak analysis
   * @param {Object} data - Leak search data
   * @returns {string} - Formatted prompt
   */
  buildPrompt(data) {
    const { query, field, results } = data;
    
    let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}" (—Ç–∏–ø –ø–æ–∏—Å–∫–∞: ${field}) –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n\n`;
    
    results.forEach((result, index) => {
      if (result.ok && result.items) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} ===\n`;
        prompt += `–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ\n`;
        
        if (Array.isArray(result.items)) {
          prompt += `–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.items.length}\n`;
          if (result.items.length > 0) {
            prompt += `–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(result.items.slice(0, 3), null, 2)}\n`;
          }
        } else if (typeof result.items === 'object') {
          const totalRecords = Object.values(result.items).reduce((sum, items) => {
            return sum + (Array.isArray(items) ? items.length : 0);
          }, 0);
          prompt += `–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}\n`;
          prompt += `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(result.items).join(', ')}\n`;
          prompt += `–ü—Ä–∏–º–µ—Ä—ã: ${JSON.stringify(result.items, null, 2).substring(0, 1000)}...\n`;
        }
        
        if (result.meta) {
          prompt += `–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(result.meta)}\n`;
        }
      } else if (!result.ok) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} ===\n`;
        prompt += `–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞\n`;
        prompt += `–û—à–∏–±–∫–∞: ${result.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
      }
      prompt += '\n';
    });
    
    prompt += `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
1. –û—Ü–µ–Ω–∏ —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ
3. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
5. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º`;
    
    return prompt;
  }

  /**
   * Parse AI response into structured format
   * @param {string} response - Raw AI response
   * @param {string} type - Summary type
   * @returns {Object} - Parsed summary
   */
  parseSummaryResponse(response, type) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      const jsonResponse = JSON.parse(response);
      return jsonResponse;
    } catch (error) {
      console.log('Failed to parse JSON response from Kimi, using fallback parsing');
      // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      return {
        found: response.toLowerCase().includes('–Ω–∞–π–¥–µ–Ω') || response.toLowerCase().includes('–æ–±–Ω–∞—Ä—É–∂–µ–Ω'),
        sources: {},
        highlights: [response.substring(0, 200) + '...'],
        person: {
          name: null,
          phones: [],
          emails: [],
          usernames: [],
          ids: [],
          addresses: []
        },
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'],
        ai_analysis: response,
        risk_level: '–¢—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏',
        summary_stats: {
          total_sources: 0,
          sources_with_data: 0,
          total_records: 0
        }
      };
    }
  }

  /**
   * Create fallback response when AI is not available
   * @param {Object} data - Original data
   * @param {string} type - Summary type
   * @returns {Object} - Fallback response
   */
  createFallbackResponse(data, type) {
    return ErrorHandler.createFallbackResponse(data, type, 'kimi-unavailable');
  }

  /**
   * Get service information
   * @returns {Object} - Service status
   */
  getServiceInfo() {
    return {
      isEnabled: this.isEnabled,
      baseUrl: this.baseUrl,
      hasApiKey: !!this.apiKey,
      provider: 'kimi',
      model: 'moonshot-v1-128k',
      version: '1.0.0'
    };
  }
}

module.exports = KimiService;