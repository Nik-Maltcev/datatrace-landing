const axios = require('axios');
const ErrorHandler = require('../utils/ErrorHandler');

class DeepSeekService {
  constructor(apiKey, baseUrl = 'https://api.deepseek.com') {
    this.apiKey = apiKey;
    this.baseUrl = baseUrl;
    this.isEnabled = !!(apiKey && apiKey.trim() !== '');
    
    if (!this.isEnabled) {
      console.warn('‚ö†Ô∏è DeepSeek API key not provided. AI summarization will fall back to OpenAI.');
    }
  }

  isAvailable() {
    return this.isEnabled;
  }

  /**
   * Generate AI summary using DeepSeek API
   * @param {Object} data - Data to summarize (query and results)
   * @param {string} type - Type of summary ('leak' or 'company')
   * @returns {Promise<Object>} - AI summary response
   */
  async generateSummary(data, type = 'leak') {
    console.log('ü§ñ DeepSeek generateSummary called:', { type, hasData: !!data });
    
    if (!this.isAvailable()) {
      console.log('‚ùå DeepSeek service not available');
      throw new Error('DeepSeek service not available');
    }

    try {
      console.log('üîç Building prompt...');
      const prompt = this.buildPrompt(data, type);
      console.log('üìù Prompt built, length:', prompt.length);
      
      const response = await axios.post(`${this.baseUrl}/v1/chat/completions`, {
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(type)
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 3000,
        temperature: 0.3,
        top_p: 0.9,
        stream: false
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        timeout: 45000
      });

      console.log('‚úÖ DeepSeek API response received:', {
        status: response.status,
        hasChoices: !!response.data?.choices,
        choicesLength: response.data?.choices?.length
      });

      const aiResponse = response.data?.choices?.[0]?.message?.content;
      
      if (!aiResponse) {
        console.log('‚ùå Empty response from DeepSeek API');
        throw new Error('Empty response from DeepSeek API');
      }

      console.log('üéâ DeepSeek response generated successfully');
      return {
        ok: true,
        summary: this.parseSummaryResponse(aiResponse, type),
        provider: 'deepseek',
        model: 'deepseek-chat',
        usage: response.data?.usage
      };
    } catch (error) {
      console.error('‚ùå DeepSeek API error:', error.message);
      if (error.response) {
        console.error('Response details:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        });
      }
      
      if (error.response) {
        const status = error.response.status;
        const statusText = error.response.statusText;
        const errorData = error.response.data;
        
        if (status === 401) {
          throw new Error('DeepSeek API authentication failed. Check your API key.');
        } else if (status === 429) {
          throw new Error('DeepSeek API rate limit exceeded. Please try again later.');
        } else if (status === 400) {
          throw new Error(`DeepSeek API bad request: ${errorData?.error?.message || statusText}`);
        } else {
          throw new Error(`DeepSeek API error: ${status} ${statusText}`);
        }
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('DeepSeek API request timeout');
      } else {
        throw new Error(`DeepSeek service error: ${error.message}`);
      }
    }
  }

  /**
   * Get system prompt based on summary type
   * @param {string} type - Summary type
   * @returns {string} - System prompt
   */
  getSystemPrompt(type) {
    if (type === 'company') {
      return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ
- –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –£–∫–∞–∂–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º`;
    } else if (type === 'leaks' || type === 'leak') {
      return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –≤ —Å–æ–≤–µ—Ç–∞—Ö`;
    } else {
      return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
    }
  }

  /**
   * Build prompt for AI based on data and type
   * @param {Object} data - Data to analyze
   * @param {string} type - Analysis type
   * @returns {string} - Formatted prompt
   */
  buildPrompt(data, type) {
    if (type === 'company') {
      return this.buildCompanyPrompt(data);
    } else if (type === 'leaks' || type === 'leak') {
      return this.buildLeakPrompt(data);
    } else {
      return this.buildLeakPrompt(data); // fallback
    }
  }

  /**
   * Build company analysis prompt
   * @param {Object} data - Company data
   * @returns {string} - Formatted prompt
   */
  buildCompanyPrompt(data) {
    const { query, results } = data;
    
    let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ò–ù–ù: ${query}\n\n`;
    
    results.forEach((result, index) => {
      if (result.ok && result.items) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} ===\n`;
        // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
        const itemsStr = JSON.stringify(result.items, null, 2);
        if (itemsStr.length > 5000) {
          prompt += `${itemsStr.substring(0, 5000)}...[–¥–∞–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω—ã]\n\n`;
        } else {
          prompt += `${itemsStr}\n\n`;
        }
      } else if (!result.ok) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} (–æ—à–∏–±–∫–∞) ===\n`;
        prompt += `–û—à–∏–±–∫–∞: ${result.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n`;
      }
    });
    
    prompt += `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –æ –∫–æ–º–ø–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—é—â—É—é:
1. –û—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, –∞–¥—Ä–µ—Å)
2. –°—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
5. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏`;
    
    return prompt;
  }

  /**
   * Build leak analysis prompt
   * @param {Object} data - Leak search data
   * @returns {string} - Formatted prompt
   */
  buildLeakPrompt(data) {
    const { query, field, results } = data;
    
    let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Ç–µ—á–µ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}" (—Ç–∏–ø: ${field})\n\n`;
    
    results.forEach((result, index) => {
      if (result.ok && result.items) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} ===\n`;
        if (Array.isArray(result.items)) {
          prompt += `–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.items.length}\n`;
          prompt += `–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(result.items.slice(0, 3), null, 2)}\n\n`;
        } else {
          prompt += `–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(result.items, null, 2)}\n\n`;
        }
      } else if (!result.ok) {
        prompt += `=== –ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}: ${result.name} (–æ—à–∏–±–∫–∞) ===\n`;
        prompt += `–û—à–∏–±–∫–∞: ${result.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n`;
      }
    });
    
    prompt += `–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É, –≤–∫–ª—é—á–∞—é—â—É—é:
1. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫
2. –¢–∏–ø—ã —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ
5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`;
    
    return prompt;
  }

  /**
   * Parse AI response into structured format
   * @param {string} response - Raw AI response
   * @param {string} type - Summary type
   * @returns {Object} - Parsed summary
   */
  parseSummaryResponse(response, type) {
    // For now, return the response as-is since DeepSeek provides well-structured responses
    // In the future, we could add more sophisticated parsing
    return {
      text: response,
      type: type,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * Create fallback response when AI is not available
   * @param {Object} data - Original data
   * @param {string} type - Summary type
   * @returns {Object} - Fallback response
   */
  createFallbackResponse(data, type) {
    return ErrorHandler.createFallbackResponse(data, type, 'deepseek-unavailable');
  }

  /**
   * Get service information
   * @returns {Object} - Service status
   */
  getServiceInfo() {
    return {
      isEnabled: this.isEnabled,
      baseUrl: this.baseUrl,
      hasApiKey: !!this.apiKey,
      provider: 'deepseek',
      model: 'deepseek-chat',
      version: '1.0.0'
    };
  }
}

module.exports = DeepSeekService;