const axios = require('axios');

class SnusbaseService {
  constructor() {
    this.apiKey = process.env.SNUSBASE_API_KEY || 'sb99cd2vxyohst65mh98ydz6ud844l'; // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    this.baseUrl = 'https://api.snusbase.com'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    if (!process.env.SNUSBASE_API_KEY) {
      console.warn('‚ö†Ô∏è [Snusbase] SNUSBASE_API_KEY not found in environment variables, using fallback key');
    } else {
      console.log('‚úÖ [Snusbase] Using API key from environment variables');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios instance –¥–ª—è Snusbase
    this.client = axios.create({
      baseURL: this.baseUrl,
      headers: {
        'Auth': this.apiKey, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        'Content-Type': 'application/json',
        'User-Agent': 'DataTrace/1.0'
      },
      timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
  }

  /**
   * –ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–æ –¥–æ–º–µ–Ω—É
   * @param {string} domain - –î–æ–º–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: company.com)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   */
  async searchByDomain(domain) {
    try {
      console.log(`üåê [Snusbase] Searching for domain: ${domain}`);
      
      const response = await this.client.post('/data/search', {
        terms: [`@${domain}`],
        types: ['email'],
        wildcard: false
      });

      const data = response.data;
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, results - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
      const resultsObj = data.results || {};
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      const allResults = [];
      Object.keys(resultsObj).forEach(dbName => {
        const dbResults = resultsObj[dbName];
        if (Array.isArray(dbResults)) {
          dbResults.forEach(record => {
            allResults.push({
              ...record,
              database: dbName
            });
          });
        }
      });
      
      console.log(`‚úÖ [Snusbase] Found ${allResults.length} results for domain ${domain} across ${Object.keys(resultsObj).length} databases`);
      
      return {
        success: true,
        domain: domain,
        totalResults: allResults.length,
        results: allResults,
        databases: this.groupByDatabase(allResults),
        rawResults: resultsObj, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        metadata: {
          searchedAt: new Date().toISOString(),
          source: 'snusbase',
          took: data.took,
          size: data.size
        }
      };

    } catch (error) {
      console.error('‚ùå [Snusbase] Search error:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message,
        domain: domain,
        totalResults: 0,
        results: []
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–æ–º–µ–Ω—É
   * @param {string} domain - –î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getDomainStats(domain) {
    try {
      console.log(`üìä [Snusbase] Getting stats for domain: ${domain}`);
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, /data/stats —ç—Ç–æ GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const response = await this.client.get('/data/stats');

      const data = response.data;
      console.log(`‚úÖ [Snusbase] Got general stats`);
      
      return {
        success: true,
        domain: domain,
        stats: data,
        metadata: {
          searchedAt: new Date().toISOString(),
          source: 'snusbase'
        }
      };

    } catch (error) {
      console.error('‚ùå [Snusbase] Stats error:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message,
        domain: domain
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  async getDatabases() {
    try {
      console.log('üìã [Snusbase] Getting available databases');
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —ç—Ç–æ GET /data/stats
      const response = await this.client.get('/data/stats');

      const data = response.data;
      console.log(`‚úÖ [Snusbase] Got database info with ${Object.keys(data.tables || {}).length} tables`);
      
      return {
        success: true,
        databases: data.tables || {},
        metadata: {
          fetchedAt: new Date().toISOString(),
          source: 'snusbase',
          totalRows: data.rows,
          features: data.features
        }
      };

    } catch (error) {
      console.error('‚ùå [Snusbase] Databases error:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.message || error.message
      };
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   * @returns {Object} –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  groupByDatabase(results) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ results —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(results)) {
      console.warn('‚ö†Ô∏è [Snusbase] groupByDatabase: expected array, got:', typeof results);
      return {};
    }
    
    const grouped = {};
    
    results.forEach(result => {
      const dbName = result.database || 'Unknown Database';
      if (!grouped[dbName]) {
        grouped[dbName] = {
          name: dbName,
          count: 0,
          records: []
        };
      }
      grouped[dbName].count++;
      grouped[dbName].records.push(result);
    });

    return grouped;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É
   * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   * @returns {Object} –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeResults(results) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ results —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(results)) {
      console.warn('‚ö†Ô∏è [Snusbase] analyzeResults: expected array, got:', typeof results);
      results = [];
    }
    
    const analysis = {
      totalRecords: results.length,
      uniqueDatabases: new Set(results.map(r => r.database || 'unknown')).size,
      dataTypes: {
        emails: 0,
        passwords: 0,
        hashes: 0,
        names: 0,
        phones: 0,
        addresses: 0
      },
      riskLevel: 'low'
    };

    results.forEach(record => {
      if (record.email) analysis.dataTypes.emails++;
      if (record.password) analysis.dataTypes.passwords++;
      if (record.hash) analysis.dataTypes.hashes++;
      if (record.name || record.firstName || record.lastName) analysis.dataTypes.names++;
      if (record.phone) analysis.dataTypes.phones++;
      if (record.address || record.city || record.country) analysis.dataTypes.addresses++;
    });

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    if (analysis.totalRecords > 1000) {
      analysis.riskLevel = 'critical';
    } else if (analysis.totalRecords > 100) {
      analysis.riskLevel = 'high';
    } else if (analysis.totalRecords > 10) {
      analysis.riskLevel = 'medium';
    }

    return analysis;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
   * @param {Object} searchResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   * @returns {Object} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  formatForFrontend(searchResults) {
    if (!searchResults.success) {
      return searchResults;
    }

    const analysis = this.analyzeResults(searchResults.results);
    
    return {
      ...searchResults,
      analysis: analysis,
      databases: searchResults.databases,
      summary: {
        totalRecords: analysis.totalRecords,
        databaseCount: analysis.uniqueDatabases,
        riskLevel: analysis.riskLevel,
        hasPasswords: analysis.dataTypes.passwords > 0,
        hasPersonalData: analysis.dataTypes.names > 0 || analysis.dataTypes.phones > 0
      }
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Snusbase API
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testConnection() {
    try {
      console.log('üîç [Snusbase] Testing API connection...');
      
      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const response = await this.client.get('/data/stats');
      
      console.log('‚úÖ [Snusbase] Connection test successful');
      return {
        success: true,
        message: 'Connection successful',
        rows: response.data.rows,
        tablesCount: Object.keys(response.data.tables || {}).length
      };
      
    } catch (error) {
      console.error('‚ùå [Snusbase] Connection test failed:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data || error.message,
        status: error.response?.status
      };
    }
  }
}

module.exports = SnusbaseService;
