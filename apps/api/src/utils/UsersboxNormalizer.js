// UsersboxNormalizer.js - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö Usersbox
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö Usersbox —Å –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏

// –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
const FIELD_TRANSLATIONS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  '_id': 'ID',
  '_score': '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥',
  'full_name': '–§–ò–û',
  'fullName': '–§–ò–û',
  'first_name': '–ò–º—è',
  'firstName': '–ò–º—è',
  'last_name': '–§–∞–º–∏–ª–∏—è',
  'lastName': '–§–∞–º–∏–ª–∏—è',
  'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
  'birthDate': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
  'name': '–ò–º—è',
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
  'phones': '–¢–µ–ª–µ—Ñ–æ–Ω—ã',
  'email': 'Email',
  'emails': 'Email',
  'contact_person': '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ',
  'contactPerson': '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ',
  
  // –ê–¥—Ä–µ—Å–∞
  'address': '–ê–¥—Ä–µ—Å',
  'addresses': '–ê–¥—Ä–µ—Å–∞',
  'pickup_point': '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
  'pickupPoint': '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
  'area': '–†–µ–≥–∏–æ–Ω',
  'city': '–ì–æ—Ä–æ–¥',
  'street': '–£–ª–∏—Ü–∞',
  'house': '–î–æ–º',
  'floor': '–≠—Ç–∞–∂',
  'intercom': '–î–æ–º–æ—Ñ–æ–Ω',
  'postal_code': '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å',
  'postalCode': '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å',
  'longitude': '–î–æ–ª–≥–æ—Ç–∞',
  'latitude': '–®–∏—Ä–æ—Ç–∞',
  'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
  
  // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  'accounts': '–°—á–µ—Ç–∞',
  'account_number': '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞',
  'accountNumber': '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞',
  'cards': '–ö–∞—Ä—Ç—ã',
  'inn': '–ò–ù–ù',
  'citizenship': '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ',
  'gender': '–ü–æ–ª',
  
  // –î–∞—Ç—ã –∏ –≤—Ä–µ–º—è
  'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
  'createdAt': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
  'delivered_at': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  'deliveredAt': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  'delivery_date': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  'deliveryDate': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  'date': '–î–∞—Ç–∞',
  'updated': '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
  'timezone': '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
  'dat_recognize': '–î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
  'datRecognize': '–î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
  'dat_process': '–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
  'datProcess': '–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
  
  // –ó–∞–∫–∞–∑—ã –∏ –ø–æ–∫—É–ø–∫–∏
  'price': '–¶–µ–Ω–∞',
  'amount': '–°—É–º–º–∞',
  'currency': '–í–∞–ª—é—Ç–∞',
  'products': '–¢–æ–≤–∞—Ä—ã',
  'shipping_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏',
  'shippingCost': '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏',
  'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
  'status': '–°—Ç–∞—Ç—É—Å',
  'first_order': '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
  'firstOrder': '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
  'platform': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞',
  'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
  'delivery_city_id': 'ID –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  'deliveryCityId': 'ID –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
  'want_receive_info': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
  'wantReceiveInfo': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
  'lang_code': '–ö–æ–¥ —è–∑—ã–∫–∞',
  'langCode': '–ö–æ–¥ —è–∑—ã–∫–∞',
  'cashier': '–ö–∞—Å—Å–∏—Ä',
  'has_sign': '–ü–æ–¥–ø–∏—Å—å',
  'hasSign': '–ü–æ–¥–ø–∏—Å—å',
  'password': '–ü–∞—Ä–æ–ª—å',
  'user_id': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  'userId': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  'yandex_uid': 'Yandex UID',
  'yandexUid': 'Yandex UID',
  'app': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
  'user_agent': 'User Agent',
  'userAgent': 'User Agent',
  'payment': '–û–ø–ª–∞—Ç–∞',
  'recovery': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
  'user_info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  'userInfo': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  'login': '–õ–æ–≥–∏–Ω',
  'moderation': '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
  'phones': '–¢–µ–ª–µ—Ñ–æ–Ω—ã',
  'pickup_point': '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
  'service': '–°–µ—Ä–≤–∏—Å'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
function translateFieldsToRussian(obj) {
  if (!obj || typeof obj !== 'object') return obj;
  
  const translated = {};
  
  Object.keys(obj).forEach(key => {
    const russianKey = FIELD_TRANSLATIONS[key] || key;
    let value = obj[key];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
    if (key === 'gender' && value === 'F') {
      value = '–ñ';
    } else if (key === 'gender' && value === 'M') {
      value = '–ú';
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤
    if ((key === 'accounts' || russianKey === '–°—á–µ—Ç–∞') && typeof value === 'string') {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "account_number":"40817810106380061511","cards":"4790872330109818"
      // –≤ "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞":"40817810106380061511","–ö–∞—Ä—Ç—ã":"4790872330109818"
      value = value.replace(/"account_number":/g, '"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞":')
                   .replace(/"cards":/g, '"–ö–∞—Ä—Ç—ã":');
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    if ((key === 'products' || russianKey === '–¢–æ–≤–∞—Ä—ã') && typeof value === 'string') {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "name":"—Ç–æ–≤–∞—Ä","price":"—Ü–µ–Ω–∞" –≤ "–ù–∞–∑–≤–∞–Ω–∏–µ":"—Ç–æ–≤–∞—Ä","–¶–µ–Ω–∞":"—Ü–µ–Ω–∞"
      value = value.replace(/"name":/g, '"–ù–∞–∑–≤–∞–Ω–∏–µ":')
                   .replace(/"price":/g, '"–¶–µ–Ω–∞":');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ JSON
    if (Array.isArray(value)) {
      value = value.map(item => {
        if (typeof item === 'string') {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ —Å—Ç—Ä–æ–∫–∞–º —Å JSON-–ø–æ–¥–æ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if ((key === 'accounts' || russianKey === '–°—á–µ—Ç–∞')) {
            return item.replace(/"account_number":/g, '"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞":')
                      .replace(/"cards":/g, '"–ö–∞—Ä—Ç—ã":');
          }
          if ((key === 'products' || russianKey === '–¢–æ–≤–∞—Ä—ã')) {
            return item.replace(/"name":/g, '"–ù–∞–∑–≤–∞–Ω–∏–µ":')
                      .replace(/"price":/g, '"–¶–µ–Ω–∞":');
          }
        }
        return item;
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
    if (Array.isArray(value)) {
      translated[russianKey] = value.map(item => 
        typeof item === 'object' ? translateFieldsToRussian(item) : item
      );
    } else if (value && typeof value === 'object' && !value.toString().startsWith('[object')) {
      translated[russianKey] = translateFieldsToRussian(value);
    } else {
      translated[russianKey] = value;
    }
  });
  
  return translated;
}

function normalizeUsersboxData(rawData) {
  if (!rawData || rawData.status !== 'success') {
    console.log('‚ùå Usersbox data is not valid or unsuccessful');
    return [];
  }

  const items = rawData.data?.items || [];
  console.log(`üìã Processing ${items.length} Usersbox sources`);

  const normalizedSources = [];

  items.forEach((sourceData, sourceIndex) => {
    if (!sourceData.source) {
      console.log(`‚ö†Ô∏è Source ${sourceIndex + 1}: Missing source information`);
      return;
    }

    const { database, collection } = sourceData.source;
    const sourceName = `${database}/${collection}`;
    const hitsData = sourceData.hits || {};
    const sourceItems = hitsData.items || [];

    console.log(`üìä Processing source "${sourceName}" with ${sourceItems.length} items`);

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    const normalizedItems = sourceItems.map((item, itemIndex) => {
      const normalized = normalizeUsersboxRecord(item, itemIndex, sourceName);
      return translateFieldsToRussian(normalized);
    });

    normalizedSources.push({
      source: sourceName,
      database: database,
      collection: collection,
      count: hitsData.count || sourceItems.length,
      hitsCount: hitsData.hitsCount || sourceItems.length,
      items: normalizedItems
    });
  });

  console.log(`‚úÖ Usersbox normalization complete: ${normalizedSources.length} sources processed`);
  return normalizedSources;
}

function normalizeUsersboxRecord(record, index, sourceName) {
  if (!record || typeof record !== 'object') {
    return { _originalIndex: index, _error: 'Invalid record format' };
  }

  const normalized = {
    _originalIndex: index,
    _source: sourceName,
    _score: record._score || 0
  };

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID
  if (record._id) {
    if (typeof record._id === 'object' && record._id.$oid) {
      normalized._id = record._id.$oid;
    } else {
      normalized._id = record._id;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
  const sourceType = getSourceType(sourceName);

  switch (sourceType) {
    case 'BANKING':
      normalizeBankingRecord(record, normalized);
      break;
    case 'DELIVERY':
      normalizeDeliveryRecord(record, normalized);
      break;
    case 'DELIVERY_CONTRAGENT':
      normalizeDeliveryContragentRecord(record, normalized);
      break;
    case 'GOVERNMENT':
      normalizeGovernmentRecord(record, normalized);
      break;
    case 'CONTACTS':
      normalizeContactsRecord(record, normalized);
      break;
    case 'ECOMMERCE':
      normalizeEcommerceRecord(record, normalized);
      break;
    case 'MARKETPLACE':
      normalizeMarketplaceRecord(record, normalized);
      break;
    case 'BANKING_ADVANCED':
      normalizeBankingAdvancedRecord(record, normalized);
      break;
    case 'FOOD_DELIVERY':
      normalizeFoodDeliveryRecord(record, normalized);
      break;
    case 'SPORT':
      normalizeSportRecord(record, normalized);
      break;
    case 'PROFESSIONAL':
      normalizeProfessionalRecord(record, normalized);
      break;
    case 'UNKNOWN':
      normalizeUnknownRecord(record, normalized);
      break;
    case 'YANDEX_EDA':
      normalizeYandexEdaRecord(record, normalized);
      break;
    default:
      normalizeGenericRecord(record, normalized);
  }

  return normalized;
}

function getSourceType(sourceName) {
  if (sourceName.includes('alfabank') || sourceName.includes('mtsbank') || sourceName.includes('sberbank')) {
    return sourceName.includes('full_2023') || sourceName.includes('spasibo') ? 'BANKING_ADVANCED' : 'BANKING';
  }
  if (sourceName.includes('cdek')) {
    return sourceName.includes('contragent') ? 'DELIVERY_CONTRAGENT' : 'DELIVERY';
  }
  if (sourceName.includes('esia') || sourceName.includes('gosuslugi')) {
    return 'GOVERNMENT';
  }
  if (sourceName.includes('getcontact')) {
    return 'CONTACTS';
  }
  if (sourceName.includes('goldapple') || sourceName.includes('papajohns')) {
    return 'ECOMMERCE';
  }
  if (sourceName.includes('mm_ru')) {
    return 'MARKETPLACE';
  }
  if (sourceName.includes('sportmaster')) {
    return 'SPORT';
  }
  if (sourceName.includes('unionepro')) {
    return 'PROFESSIONAL';
  }
  if (sourceName.includes('unknown_dump')) {
    return 'UNKNOWN';
  }
  if (sourceName.includes('yandex/eda')) {
    return 'YANDEX_EDA';
  }
  return 'GENERIC';
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π (alfabank_ru, etc.)
function normalizeBankingRecord(record, normalized) {
  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (record.full_name) normalized.fullName = record.full_name;
  if (record.birth_date) normalized.birthDate = formatDate(record.birth_date);

  // –ö–æ–Ω—Ç–∞–∫—Ç—ã
  if (record.phones) {
    normalized.phones = Array.isArray(record.phones) ? record.phones : [record.phones];
  }

  // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  if (record.accounts) {
    normalized.accounts = Array.isArray(record.accounts) ? record.accounts : [record.accounts];
  }
  if (record.account_number) {
    normalized.accountNumber = record.account_number;
  }
  if (record.cards) {
    normalized.cards = Array.isArray(record.cards) ? record.cards : [record.cards];
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (cdek/full)
function normalizeDeliveryRecord(record, normalized) {
  if (record.contact_person) normalized.contactPerson = record.contact_person;
  if (record.phone) normalized.phone = record.phone;
  if (record.email) normalized.email = record.email;
  if (record.pickup_point) normalized.pickupPoint = formatPickupPoint(record.pickup_point);
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ (cdek/contragent)
function normalizeDeliveryContragentRecord(record, normalized) {
  if (record.name) normalized.name = record.name;
  if (record.phones) {
    normalized.phones = Array.isArray(record.phones) ? record.phones : [record.phones];
  }
  if (record.address_fact) normalized.addressFact = formatAddress(record.address_fact);
  if (record.address_real) normalized.addressReal = formatAddress(record.address_real);
  if (record.email) {
    normalized.email = Array.isArray(record.email) ? record.email : [record.email];
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (esia_gosuslugi_ru)
function normalizeGovernmentRecord(record, normalized) {
  if (record.full_name) normalized.fullName = record.full_name;
  if (record.phones) {
    normalized.phones = Array.isArray(record.phones) ? record.phones : [record.phones];
  }
  if (record.emails) {
    normalized.emails = Array.isArray(record.emails) ? record.emails : [record.emails];
  }
  if (record.addresses) {
    normalized.addresses = Array.isArray(record.addresses) ? record.addresses : [record.addresses];
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (getcontact)
function normalizeContactsRecord(record, normalized) {
  if (record.phone) normalized.phone = record.phone;
  if (record.full_name) normalized.fullName = record.full_name;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è e-commerce (goldapple_ru)
function normalizeEcommerceRecord(record, normalized) {
  if (record.first_name) normalized.firstName = record.first_name;
  if (record.last_name) normalized.lastName = record.last_name;
  if (record.created_at) normalized.createdAt = formatDate(record.created_at);
  if (record.delivered_at) normalized.deliveredAt = formatDate(record.delivered_at);
  if (record.phone) normalized.phone = record.phone;
  if (record.email) normalized.email = record.email;
  if (record.area) normalized.area = record.area;
  if (record.city) normalized.city = record.city;
  if (record.street) normalized.street = record.street;
  if (record.house) normalized.house = record.house;
  if (record.postal_code) normalized.postalCode = record.postal_code;
  if (record.timezone) normalized.timezone = record.timezone;
  if (record.shipping_cost) normalized.shippingCost = record.shipping_cost;
  if (record.products) {
    normalized.products = Array.isArray(record.products) ? record.products : [record.products];
  }
  if (record.comment) normalized.comment = record.comment;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (mm_ru)
function normalizeMarketplaceRecord(record, normalized) {
  if (record.status) normalized.status = record.status;
  if (record.price) normalized.price = record.price;
  if (record.date) normalized.date = formatDate(record.date);
  if (record.first_order) normalized.firstOrder = record.first_order;
  if (record.platform) normalized.platform = record.platform;
  if (record.paid) normalized.paid = record.paid;
  if (record.delivery_date) normalized.deliveryDate = formatDate(record.delivery_date);
  if (record.delivery_city_id) normalized.deliveryCityId = record.delivery_city_id;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (mtsbank_ru/full_2023)
function normalizeBankingAdvancedRecord(record, normalized) {
  if (record.inn) normalized.inn = record.inn;
  if (record.citizenship) normalized.citizenship = record.citizenship;
  if (record.gender) normalized.gender = record.gender;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã (papajohns_ru)
function normalizeFoodDeliveryRecord(record, normalized) {
  if (record.address) normalized.address = record.address;
  if (record.floor) normalized.floor = record.floor;
  if (record.longitude) normalized.longitude = record.longitude;
  if (record.latitude) normalized.latitude = record.latitude;
  if (record.intercom) normalized.intercom = record.intercom;
  if (record.title) normalized.title = record.title;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (sportmaster)
function normalizeSportRecord(record, normalized) {
  if (record.want_receive_info) normalized.wantReceiveInfo = record.want_receive_info;
  if (record.dat_recognize) normalized.datRecognize = formatDate(record.dat_recognize);
  if (record.dat_process) normalized.datProcess = formatDate(record.dat_process);
  if (record.updated) normalized.updated = formatDate(record.updated);
  if (record.lang_code) normalized.langCode = record.lang_code;
  if (record.cashier) normalized.cashier = record.cashier;
  if (record.has_sign) normalized.hasSign = record.has_sign;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (unionepro_ru)
function normalizeProfessionalRecord(record, normalized) {
  if (record.recovery) normalized.recovery = record.recovery;
  if (record.token) normalized.token = record.token;
  if (record.stage) normalized.stage = record.stage;
  if (record.time) normalized.time = record.time;
  if (record.user_info) normalized.userInfo = record.user_info;
  if (record.geo) normalized.geo = record.geo;
  if (record.country) normalized.country = record.country;
  if (record.city) normalized.city = record.city;
  if (record.fias_id) normalized.fiasId = record.fias_id;
  if (record.fias_addr) normalized.fiasAddr = record.fias_addr;
  if (record.work) normalized.work = record.work;
  if (record.place) normalized.place = record.place;
  if (record.industry) normalized.industry = record.industry;
  if (record.position) normalized.position = record.position;
  if (record.ogrn) normalized.ogrn = record.ogrn;
  if (record.inn) normalized.inn = record.inn;
  if (record.birthday) normalized.birthday = formatDate(record.birthday);
  if (record.year) normalized.year = record.year;
  if (record.month) normalized.month = record.month;
  if (record.day) normalized.day = record.day;
  if (record.passport) normalized.passport = record.passport;
  if (record.name) normalized.name = record.name;
  if (record.sur_name) normalized.surName = record.sur_name;
  if (record.patronymic) normalized.patronymic = record.patronymic;
  if (record.docs) normalized.docs = record.docs;
  if (record.snils) normalized.snils = record.snils;
  if (record.snils_dop) normalized.snilsDop = record.snils_dop;
  if (record.idDocName) normalized.idDocName = record.idDocName;
  if (record.idDoc) normalized.idDoc = record.idDoc;
  if (record.images) normalized.images = record.images;
  if (record.login) normalized.login = record.login;
  if (record.moderation) normalized.moderation = record.moderation;
  if (record.is_moderated) normalized.isModerated = record.is_moderated;
  if (record.moderation_time) normalized.moderationTime = record.moderation_time;
  if (record.comment) normalized.comment = record.comment;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function normalizeUnknownRecord(record, normalized) {
  if (record.password) normalized.password = record.password;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Yandex Eda
function normalizeYandexEdaRecord(record, normalized) {
  if (record.user_id) normalized.userId = record.user_id;
  if (record.yandex_uid) normalized.yandexUid = record.yandex_uid;
  if (record.amount) normalized.amount = record.amount;
  if (record.currency) normalized.currency = record.currency;
  if (record.app) normalized.app = record.app;
  if (record.user_agent) normalized.userAgent = record.user_agent;
  if (record.payment) normalized.payment = record.payment;
  if (record.service) normalized.service = record.service;
  if (record.status) normalized.status = record.status;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –ø–æ–ª–µ–π
function normalizeGenericRecord(record, normalized) {
  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏
  Object.keys(record).forEach(key => {
    if (!normalized.hasOwnProperty(key) && !key.startsWith('_')) {
      normalized[key] = record[key];
    }
  });
}

function formatDate(dateStr) {
  if (!dateStr) return null;

  // –ï—Å–ª–∏ —É–∂–µ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
  if (/^\d{2}\.\d{2}\.\d{4}$/.test(dateStr)) {
    return dateStr;
  }

  // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
  if (/^\d{4}-\d{2}-\d{2}/.test(dateStr)) {
    return dateStr; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
  }

  return dateStr;
}

function formatAddress(addr) {
  if (!addr || typeof addr !== 'object') return addr;

  const parts = [];
  if (addr.city) parts.push(`–≥. ${addr.city}`);
  if (addr.street) {
    const street = addr.street.rus || addr.street.eng || addr.street;
    parts.push(street);
  }
  if (addr.house) parts.push(`–¥. ${addr.house}`);
  if (addr.flat) parts.push(`–∫–≤. ${addr.flat}`);

  return parts.length > 0 ? parts.join(', ') : addr;
}

function formatPickupPoint(pickup) {
  if (!pickup || typeof pickup !== 'object') return pickup;

  const parts = [];
  if (pickup.code) parts.push(`–ö–æ–¥: ${pickup.code}`);
  if (pickup.address) parts.push(`–ê–¥—Ä–µ—Å: ${pickup.address}`);

  return parts.length > 0 ? parts.join(', ') : pickup;
}

module.exports = {
  normalizeUsersboxData
};
