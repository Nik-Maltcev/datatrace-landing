/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ITP
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

class ITPNormalizer {
  
  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
   * @param {string} phone - –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
   */
  static normalizePhone(phone) {
    if (!phone) return null;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = phone.toString().replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä
    if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–º–µ–µ—Ç 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if (digits.length === 10) {
      return '+7' + digits;
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å +
    return digits.startsWith('+') ? phone : '+' + digits;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
   * @param {string} birthDate - –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞
   * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
   */
  static normalizeBirthDate(birthDate) {
    if (!birthDate) return null;
    
    const dateStr = birthDate.toString().trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY
    if (dateStr.includes('.')) {
      const parts = dateStr.split('.');
      if (parts.length === 3) {
        const [day, month, year] = parts;
        return `${year.padStart(4, '0')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD (—É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω)
    if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return dateStr;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ DD/MM/YYYY
    if (dateStr.includes('/')) {
      const parts = dateStr.split('/');
      if (parts.length === 3) {
        const [day, month, year] = parts;
        return `${year.padStart(4, '0')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
    }
    
    return dateStr; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∞
   * @param {string|number} gender - –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
   * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  static normalizeGender(gender) {
    if (!gender) return null;
    
    const genderStr = gender.toString().toLowerCase().trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (genderStr === '1' || genderStr === 'male' || genderStr === '–º' || genderStr === '–º—É–∂—Å–∫–æ–π') {
      return '–ú—É–∂—Å–∫–æ–π';
    }
    
    if (genderStr === '2' || genderStr === 'female' || genderStr === '–∂' || genderStr === '–∂–µ–Ω—Å–∫–∏–π') {
      return '–ñ–µ–Ω—Å–∫–∏–π';
    }
    
    return gender; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏
   * @param {string} name - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
   * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
   */
  static normalizeName(name) {
    if (!name) return null;
    
    return name.toString()
      .trim()
      .split(' ')
      .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
      .join(' ');
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (—Å–∫—Ä—ã—Ç–∏–µ —á–∞—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞)
   * @param {string} cardNumber - –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
   * @returns {string} –ß–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã—Ç—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
   */
  static normalizeCardNumber(cardNumber) {
    if (!cardNumber) return null;
    
    const digits = cardNumber.toString().replace(/\D/g, '');
    
    if (digits.length >= 8) {
      return digits.substring(0, 4) + '*'.repeat(digits.length - 8) + digits.substring(digits.length - 4);
    }
    
    return '*'.repeat(digits.length);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * @param {Object} document - –î–æ–∫—É–º–µ–Ω—Ç
   * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
   */
  static normalizeDocument(document) {
    if (!document) return null;
    
    return {
      type: document.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      serial: document.serial || null,
      authority: document.authority || null,
      country: document.country || 'RU',
      dateIssue: document.date_issue ? this.normalizeBirthDate(document.date_issue) : null
    };
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @param {Object} financial - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static normalizeFinancial(financial) {
    if (!financial) return null;
    
    return {
      cardNumber: financial.card_number ? this.normalizeCardNumber(financial.card_number) : null,
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} dateStr - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –∏–ª–∏ –¥—Ä—É–≥–æ–º
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
   */
  static formatDate(dateStr) {
    if (!dateStr) return null;
    
    try {
      const date = new Date(dateStr);
      if (isNaN(date.getTime())) return dateStr;
      
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (e) {
      return dateStr;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ ITP
   * @param {Object} record - –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–∑ ITP
   * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
   */
  static normalizeRecord(record) {
    if (!record) return null;

    const normalized = {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      dataProvider: record.data_provider || null,
      dbName: record.db_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      name: this.normalizeName(record.name),
      phone: this.normalizePhone(record.phone),
      email: record.email || null,
      address: record.address || null,
      birthDate: this.normalizeBirthDate(record.birth_date),
      gender: this.normalizeGender(record.sex || record.gender),
      isVip: Boolean(record.is_vip),

      // –ê–∫–∫–∞—É–Ω—Ç—ã
      login: record.login || null,
      password: record.password || null,
      passwordHash: record.password_hash || null,
      userId: record.id || null,
      serviceUrl: record.url || null,
      serviceTitle: record.title || null,

      // –î–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      documents: record.documents ? this.normalizeDocument(record.documents) : null,

      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      financials: record.financials ? this.normalizeFinancial(record.financials) : null,
      cardNumber: record.card_number ? this.normalizeCardNumber(record.card_number) : null,

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      actuality: record.actuality || null,
      crmId: record.crm_id || null,
      parentId: record.parent_id || null,
      createdDate: record.created_date ? this.normalizeBirthDate(record.created_date) : null,
      telegramId: record.telegram_id || null,
      additionalNames: record.additional_names || null,
      notes: record.notes || null,
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
      phoneCarrier: record.phone_carrier || null,
      phoneRegion: record.phone_region || null,
      postalCode: record.postal_code || null,
      senderInn: record.sender_inn || null,
      senderName: record.sender_name || null,
      kpp: record.kpp || null,
      userAgent: record.user_agent || null,
      action: record.action || null,

      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      _original: record
    };

    // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    Object.keys(normalized).forEach(key => {
      if (normalized[key] === null && key !== '_original') {
        delete normalized[key];
      }
    });

    return normalized;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –∑–∞–ø–∏—Å–µ–π ITP
   * @param {Array} records - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
   * @returns {Array} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   */
  static normalizeRecords(records) {
    console.log(`üîß ITPNormalizer.normalizeRecords called with:`, {
      inputType: typeof records,
      isArray: Array.isArray(records),
      length: Array.isArray(records) ? records.length : 'not array',
      keys: records && typeof records === 'object' ? Object.keys(records) : 'no keys'
    });
    
    if (!Array.isArray(records)) {
      console.log(`‚ö†Ô∏è ITPNormalizer: Expected array, got ${typeof records}, trying to convert...`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –º–∞—Å—Å–∏–≤—ã –∏–∑ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤
      if (records && typeof records === 'object') {
        const allRecords = [];
        Object.values(records).forEach(value => {
          if (Array.isArray(value)) {
            allRecords.push(...value);
          } else if (value && typeof value === 'object' && value.data && Array.isArray(value.data)) {
            allRecords.push(...value.data);
          }
        });
        
        if (allRecords.length > 0) {
          console.log(`‚úÖ ITPNormalizer: Extracted ${allRecords.length} records from object`);
          records = allRecords;
        } else {
          console.log(`‚ùå ITPNormalizer: No valid records found in object`);
          return [];
        }
      } else {
        return [];
      }
    }
    
    const normalized = records.map(record => this.normalizeRecord(record)).filter(Boolean);
    console.log(`üìä ITPNormalizer: Normalized ${normalized.length} records from ${records.length} input records`);
    
    return normalized;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
   * @param {string} field - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ
   */
  static getFieldDescription(field) {
    const descriptions = {
      name: 'üë§ –ò–º—è',
      phone: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
      email: 'üìß Email',
      address: 'üè† –ê–¥—Ä–µ—Å',
      birthDate: 'üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      gender: '‚ößÔ∏è –ü–æ–ª',
      login: 'üë®‚Äçüíª –õ–æ–≥–∏–Ω',
      password: 'üîë –ü–∞—Ä–æ–ª—å',
      passwordHash: 'üîê –•–µ—à –ø–∞—Ä–æ–ª—è',
      cardNumber: 'üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
      documents: 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã',
      telegramId: 'üì± Telegram ID',
      phoneCarrier: 'üì∂ –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∑–∏',
      phoneRegion: 'üåç –†–µ–≥–∏–æ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      dbName: 'üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      createdDate: 'üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      isVip: '‚≠ê VIP —Å—Ç–∞—Ç—É—Å'
    };
    
    return descriptions[field] || field;
  }
}

module.exports = ITPNormalizer;
