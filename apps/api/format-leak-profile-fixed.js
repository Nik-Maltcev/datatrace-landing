// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ format-leak-profile —Ç–æ–ª—å–∫–æ –¥–ª—è GPT-5

app.post('/api/format-leak-profile', optionalAuth, userRateLimit(10, 15 * 60 * 1000), async (req, res) => {
  try {
    const { data: leakData } = req.body;

    if (!Array.isArray(leakData) || leakData.length === 0) {
      return res.status(400).json({
        ok: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        details: 'Expected array of leak data'
      });
    }

    console.log('üé® Format leak profile request received');
    console.log('üìù Prepared data length:', JSON.stringify(leakData).length);

    if (!openai) {
      console.log('‚ö†Ô∏è OpenAI not available, returning basic formatting');
      return res.json({
        ok: true,
        model: 'none',
        profile: 'üìã –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
    const rawDataText = JSON.stringify(leakData, null, 2);
    const maxLength = 10000;
    const truncatedData = rawDataText.length > maxLength 
      ? rawDataText.substring(0, maxLength) + '\n\n[–î–ê–ù–ù–´–ï –û–ë–†–ï–ó–ê–ù–´]'
      : rawDataText;

    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. 

–í–ê–ñ–ù–û:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
3. –ó–∞–º–∞—Å–∫–∏—Ä—É–π –≤—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Å–ø–æ—Ä—Ç–∞, –∫–∞—Ä—Ç—ã, –ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞)
4. –ì—Ä—É–ø–ø–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏
5. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–µ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–¥–µ–ª
6. –°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ü–æ–ª–Ω–æ–µ –∏–º—è
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è  
- –ü–æ–ª
- –¢–µ–ª–µ—Ñ–æ–Ω—ã

üìß Email –∞–¥—Ä–µ—Å–∞
- –°–ø–∏—Å–æ–∫ email —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

üè† –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
- –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞

üîç Telegram –ø—Ä–æ—Ñ–∏–ª—å
- ID –∏ –∏–º–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö

üè¶ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
- –ë–∞–Ω–∫–∏ –∏ —É—Å–ª—É–≥–∏

üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
- –ü–∞—Å–ø–æ—Ä—Ç (–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
- –°–ù–ò–õ–° (–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)

üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤–∏—Å—ã
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏
- –ú–§–û, –∑–∞–π–º—ã, —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ

üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è
- VIP —Å—Ç–∞—Ç—É—Å—ã, –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
${truncatedData}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:`;

    try {
      console.log('ü§ñ Sending request to OpenAI for profile formatting...');
      console.log(`üîÑ Trying model: gpt-5`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT-5
      const requestParams = {
        model: 'gpt-5',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_completion_tokens: 4096,
        temperature: 0.3
      };

      const completion = await openai.chat.completions.create(requestParams);
      console.log(`‚úÖ Successfully used model: gpt-5`);

      const formattedProfile = completion.choices[0]?.message?.content;
      
      if (!formattedProfile || formattedProfile.trim() === '') {
        console.log('‚ö†Ô∏è Empty response from GPT-5');
        console.log('üìã Providing basic summary instead');
        const fallbackProfile = `üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É "${truncatedData.substring(0, 100)}..."\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.`;
        
        return res.json({
          ok: true,
          model: 'fallback',
          profile: fallbackProfile
        });
      }

      console.log('‚úÖ OpenAI profile formatting completed');
      console.log('üìä Response length:', formattedProfile.length);

      res.json({
        ok: true,
        model: 'gpt-5',
        profile: formattedProfile,
        meta: {
          sources_processed: leakData.length,
          data_length: truncatedData.length,
          original_data_length: rawDataText.length,
          response_length: formattedProfile.length
        }
      });

    } catch (aiError) {
      console.error('‚ùå OpenAI error:', aiError.message);
      console.log('üìã Providing fallback profile formatting...');
      
      const fallbackProfile = `üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É "${truncatedData.substring(0, 100)}..."\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.`;
      
      res.json({
        ok: true,
        model: 'fallback',
        profile: fallbackProfile,
        error: 'AI service temporarily unavailable',
        details: aiError.message,
        fallback: true
      });
    }

  } catch (error) {
    console.error('‚ùå Error in format-leak-profile:', error);
    res.status(500).json({
      ok: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});
